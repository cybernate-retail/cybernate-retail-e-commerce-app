{
	"info": {
		"name": "localhost:8000-GraphMan",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Queries",
			"item": [
				{
					"name": "webhook",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query webhook($id: ID!) {\n  webhook(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # name # Type: NON_NULL\n    # events # List of webhook events. # Type: NON_NULL\n    # syncEvents # List of synchronous webhook events. # Type: NON_NULL\n    # asyncEvents # List of asynchronous webhook events. # Type: NON_NULL\n    # app # Type: NON_NULL\n    # eventDeliveries # Event deliveries.\n    # targetUrl # Target URL for webhook. # Type: NON_NULL\n    # isActive # Informs if webhook is activated. # Type: NON_NULL\n    secretKey # Used to create a hash signature for each payload.\n    subscriptionQuery # Used to define payloads for specific events.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a webhook by ID. Requires one of the following permissions: MANAGE_APPS, OWNER."
					},
					"response": []
				},
				{
					"name": "webhookEvents",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query webhookEvents {\n  webhookEvents {\n    __typename\n    # name # Display name of the event. # Type: NON_NULL\n    # eventType # Internal name of the event type. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of all available webhook events.\n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "webhookSamplePayload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query webhookSamplePayload($eventType: WebhookSampleEventTypeEnum!) {\n  webhookSamplePayload(eventType: $eventType)\n}",
								"variables": "{\n\t\"eventType\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Retrieve a sample payload for a given webhook event based on real data. It can be useful for some integrations where sample payload is required."
					},
					"response": []
				},
				{
					"name": "warehouse",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query warehouse($id: ID!) {\n  warehouse(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # email # Type: NON_NULL\n    # isPrivate # Type: NON_NULL\n    # address # Type: NON_NULL\n    # companyName # Warehouse company name. # Type: NON_NULL\n    # clickAndCollectOption # Click and collect options: local, all or disabled.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # shippingZones # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a warehouse by ID.\n\nRequires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "warehouses",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query warehouses($filter: WarehouseFilterInput, $sortBy: WarehouseSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  warehouses(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of warehouses.\n\nRequires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS, MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "translations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query translations($kind: TranslatableKinds!, $before: String, $after: String, $first: Int, $last: Int) {\n  translations(\n    kind: $kind\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"kind\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Returns a list of all translatable items of a given kind.\n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "translation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query translation($id: ID!, $kind: TranslatableKinds!) {\n  translation(id: $id, kind: $kind)\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"kind\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Lookup a translatable item by ID.\n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "stock",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stock($id: ID!) {\n  stock(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # warehouse # Type: NON_NULL\n    # productVariant # Type: NON_NULL\n    # quantity # Quantity of a product in the warehouse's possession, including the allocated stock that is waiting for shipment.  Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS. # Type: NON_NULL\n    # quantityAllocated # Quantity allocated for orders.  Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS. # Type: NON_NULL\n    # quantityReserved # Quantity reserved for checkouts.  Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a stock by ID\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "stocks",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stocks($filter: StockFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  stocks(\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of stocks.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "shop",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query shop {\n  shop {\n    __typename\n    # availablePaymentGateways # List of available payment gateways. # Type: NON_NULL\n    # availableExternalAuthentications # List of available external authentications. # Type: NON_NULL\n    # availableShippingMethods # Shipping methods that are available for the shop. # Type: LIST\n    # channelCurrencies # List of all currencies supported by shop's channels.  Added in Saleor 3.1.  Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP. # Type: NON_NULL\n    # countries # List of countries available in the shop. # Type: NON_NULL\n    # defaultCountry # Shop's default country.\n    defaultMailSenderName # Default shop's email sender's name.  Requires one of the following permissions: MANAGE_SETTINGS.\n    defaultMailSenderAddress # Default shop's email sender's address.  Requires one of the following permissions: MANAGE_SETTINGS.\n    description # Shop's description.\n    # domain # Shop's domain data. # Type: NON_NULL\n    # languages # List of the shops's supported languages. # Type: NON_NULL\n    # name # Shop's name. # Type: NON_NULL\n    # permissions # List of available permissions. # Type: NON_NULL\n    # phonePrefixes # List of possible phone prefixes. # Type: NON_NULL\n    headerText # Header text.\n    # includeTaxesInPrices # Include taxes in prices. # Type: NON_NULL\n    # fulfillmentAutoApprove # Automatically approve all new fulfillments.  Added in Saleor 3.1. # Type: NON_NULL\n    # fulfillmentAllowUnpaid # Allow to approve fulfillments which are unpaid.  Added in Saleor 3.1. # Type: NON_NULL\n    # displayGrossPrices # Display prices with tax in store. # Type: NON_NULL\n    # chargeTaxesOnShipping # Charge taxes on shipping. # Type: NON_NULL\n    trackInventoryByDefault # Enable inventory tracking.\n    defaultWeightUnit # Default weight unit.\n    # translation # Returns translated shop fields for the given language code.\n    automaticFulfillmentDigitalProducts # Enable automatic fulfillment for all digital products.  Requires one of the following permissions: MANAGE_SETTINGS.\n    reserveStockDurationAnonymousUser # Default number of minutes stock will be reserved for anonymous checkout or null when stock reservation is disabled.  Added in Saleor 3.1.  Requires one of the following permissions: MANAGE_SETTINGS.\n    reserveStockDurationAuthenticatedUser # Default number of minutes stock will be reserved for authenticated checkout or null when stock reservation is disabled.  Added in Saleor 3.1.  Requires one of the following permissions: MANAGE_SETTINGS.\n    limitQuantityPerCheckout # Default number of maximum line quantity in single checkout (per single checkout line).  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: MANAGE_SETTINGS.\n    defaultDigitalMaxDownloads # Default number of max downloads per digital content URL.  Requires one of the following permissions: MANAGE_SETTINGS.\n    defaultDigitalUrlValidDays # Default number of days which digital content URL will be valid.  Requires one of the following permissions: MANAGE_SETTINGS.\n    # companyAddress # Company address.\n    customerSetPasswordUrl # URL of a view where customers can set their password.\n    # staffNotificationRecipients # List of staff notification recipients.  Requires one of the following permissions: MANAGE_SETTINGS. # Type: LIST\n    # limits # Resource limitations and current usage if any set for a shop  Requires one of the following permissions: AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # version # Saleor API version.  Requires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP. # Type: NON_NULL\n    # schemaVersion # Minor Saleor API version.  Added in Saleor 3.5. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Return information about the shop."
					},
					"response": []
				},
				{
					"name": "orderSettings",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orderSettings {\n  orderSettings {\n    __typename\n    # automaticallyConfirmAllNewOrders # Type: NON_NULL\n    # automaticallyFulfillNonShippableGiftCard # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Order related settings from site settings.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "giftCardSettings",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query giftCardSettings {\n  giftCardSettings {\n    __typename\n    # expiryType # The gift card expiry type settings. # Type: NON_NULL\n    # expiryPeriod # The gift card expiry period settings.\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Gift card related settings from site settings.\n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "shippingZone",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query shippingZone($id: ID!, $channel: String) {\n  shippingZone(id: $id, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # default # Type: NON_NULL\n    # priceRange # Lowest and highest prices for the shipping.\n    # countries # List of countries available for the method. # Type: NON_NULL\n    # shippingMethods # List of shipping methods available for orders shipped to countries within this shipping zone. # Type: LIST\n    # warehouses # List of warehouses for shipping zone. # Type: NON_NULL\n    # channels # List of channels for shipping zone. # Type: NON_NULL\n    description # Description of a shipping zone.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a shipping zone by ID.\n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingZones",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query shippingZones($filter: ShippingZoneFilterInput, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  shippingZones(\n    filter: $filter\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's shipping zones.\n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "digitalContent",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query digitalContent($id: ID!) {\n  digitalContent(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # useDefaultSettings # Type: NON_NULL\n    # automaticFulfillment # Type: NON_NULL\n    # contentFile # Type: NON_NULL\n    maxDownloads\n    urlValidDays\n    # urls # List of URLs for the digital variant. # Type: LIST\n    # productVariant # Product variant assigned to digital content. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up digital content by ID.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "digitalContents",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query digitalContents($before: String, $after: String, $first: Int, $last: Int) {\n  digitalContents(before: $before, after: $after, first: $first, last: $last) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of digital content.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "categories",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query categories($filter: CategoryFilterInput, $sortBy: CategorySortingInput, $level: Int, $before: String, $after: String, $first: Int, $last: Int) {\n  categories(\n    filter: $filter\n    sortBy: $sortBy\n    level: $level\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"level\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's categories."
					},
					"response": []
				},
				{
					"name": "category",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query category($id: ID, $slug: String) {\n  category(id: $id, slug: $slug) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    seoTitle\n    seoDescription\n    # name # Type: NON_NULL\n    description # Description of the category.  Rich text format. For reference see https://editorjs.io/\n    # slug # Type: NON_NULL\n    # parent\n    # level # Type: NON_NULL\n    descriptionJson # Description of the category.  Rich text format. For reference see https://editorjs.io/\n    # ancestors # List of ancestors of the category.\n    # products # List of products in the category. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.\n    # children # List of children of the category.\n    # backgroundImage\n    # translation # Returns translated category fields for the given language code.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a category by ID or slug."
					},
					"response": []
				},
				{
					"name": "collection",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query collection($id: ID, $slug: String, $channel: String) {\n  collection(id: $id, slug: $slug, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    seoTitle\n    seoDescription\n    # name # Type: NON_NULL\n    description # Description of the collection.  Rich text format. For reference see https://editorjs.io/\n    # slug # Type: NON_NULL\n    channel # Channel given to retrieve this collection. Also used by federation gateway to resolve this object in a federated query.\n    descriptionJson # Description of the collection.  Rich text format. For reference see https://editorjs.io/\n    # products # List of products in this collection.\n    # backgroundImage\n    # translation # Returns translated collection fields for the given language code.\n    # channelListings # List of channels in which the collection is available.  Requires one of the following permissions: MANAGE_PRODUCTS. # Type: LIST\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null,\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a collection by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collections",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query collections($filter: CollectionFilterInput, $sortBy: CollectionSortingInput, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  collections(\n    filter: $filter\n    sortBy: $sortBy\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's collections. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "product",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query product($id: ID, $slug: String, $channel: String) {\n  product(id: $id, slug: $slug, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    seoTitle\n    seoDescription\n    # name # Type: NON_NULL\n    description # Description of the product.  Rich text format. For reference see https://editorjs.io/\n    # productType # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # category\n    # created # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n    # chargeTaxes # Type: NON_NULL\n    # weight\n    # defaultVariant\n    rating\n    channel # Channel given to retrieve this product. Also used by federation gateway to resolve this object in a federated query.\n    descriptionJson # Description of the product.  Rich text format. For reference see https://editorjs.io/\n    # thumbnail\n    # pricing # Lists the storefront product's pricing, the current price and discounts, only meant for displaying.\n    isAvailable # Whether the product is in stock and visible or not.\n    # taxType # A type of tax. Assigned by enabled tax gateway\n    # attributes # List of attributes assigned to this product. # Type: NON_NULL\n    # channelListings # List of availability in channels for the product.  Requires one of the following permissions: MANAGE_PRODUCTS. # Type: LIST\n    # mediaById # Get a single product media by ID.\n    # imageById # Get a single product image by ID.\n    # variants # List of variants for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. # Type: LIST\n    # media # List of media for the product. # Type: LIST\n    # images # List of images for the product. # Type: LIST\n    # collections # List of collections for the product. Requires the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS. # Type: LIST\n    # translation # Returns translated product fields for the given language code.\n    availableForPurchase # Date when product is available for purchase.\n    availableForPurchaseAt # Date when product is available for purchase.\n    isAvailableForPurchase # Whether the product is available for purchase.\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null,\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a product by ID. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "products",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query products($filter: ProductFilterInput, $sortBy: ProductOrder, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  products(\n    filter: $filter\n    sortBy: $sortBy\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's products. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productType",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query productType($id: ID!) {\n  productType(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # hasVariants # Type: NON_NULL\n    # isShippingRequired # Type: NON_NULL\n    # isDigital # Type: NON_NULL\n    # weight\n    # kind # The product type kind. # Type: NON_NULL\n    # products # List of products of this type.\n    # taxType # A type of tax. Assigned by enabled tax gateway\n    # variantAttributes # Variant attributes of that product type. # Type: LIST\n    # assignedVariantAttributes # Variant attributes of that product type with attached variant selection.  Added in Saleor 3.1. # Type: LIST\n    # productAttributes # Product attributes of that product type. # Type: LIST\n    # availableAttributes # List of attributes which can be assigned to this product type.  Requires one of the following permissions: MANAGE_PRODUCTS.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a product type by ID."
					},
					"response": []
				},
				{
					"name": "productTypes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query productTypes($filter: ProductTypeFilterInput, $sortBy: ProductTypeSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  productTypes(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's product types."
					},
					"response": []
				},
				{
					"name": "productVariant",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query productVariant($id: ID, $sku: String, $channel: String) {\n  productVariant(id: $id, sku: $sku, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    sku\n    # product # Type: NON_NULL\n    # trackInventory # Type: NON_NULL\n    quantityLimitPerCustomer\n    # weight\n    channel # Channel given to retrieve this product variant. Also used by federation gateway to resolve this object in a federated query.\n    # channelListings # List of price information in channels for the product.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: LIST\n    # pricing # Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.\n    # attributes # List of attributes assigned to this variant. # Type: NON_NULL\n    margin # Gross margin percentage value.\n    quantityOrdered # Total quantity ordered.  Requires one of the following permissions: MANAGE_PRODUCTS.\n    # revenue # Total revenue generated by a variant in given period of time. Note: this field should be queried using `reportProductSales` query as it uses optimizations suitable for such calculations.  Requires one of the following permissions: MANAGE_PRODUCTS.\n    # images # List of images for the product variant. # Type: LIST\n    # media # List of media for the product variant. # Type: LIST\n    # translation # Returns translated product variant fields for the given language code.\n    # digitalContent # Digital content for the product variant.  Requires one of the following permissions: MANAGE_PRODUCTS.\n    # stocks # Stocks for the product variant.  Requires one of the following permissions: MANAGE_PRODUCTS, MANAGE_ORDERS. # Type: LIST\n    quantityAvailable # Quantity of a product available for sale in one checkout. Field value will be `null` when no `limitQuantityPerCheckout` in global settings has been set, and `productVariant` stocks are not tracked.\n    # preorder # Preorder data for product variant.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # created # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"sku\": null,\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a product variant by ID or SKU. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariants",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query productVariants($ids: [ID]!, $channel: String, $filter: ProductVariantFilterInput, $sortBy: ProductVariantSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  productVariants(\n    ids: $ids\n    channel: $channel\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"],\n\t\"channel\": null,\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of product variants. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "reportProductSales",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query reportProductSales($period: ReportingPeriod!, $channel: String!, $before: String, $after: String, $first: Int, $last: Int) {\n  reportProductSales(\n    period: $period\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"period\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of top selling products.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "payment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query payment($id: ID!) {\n  payment(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # gateway # Type: NON_NULL\n    # isActive # Type: NON_NULL\n    # created # Type: NON_NULL\n    # modified # Type: NON_NULL\n    # token # Type: NON_NULL\n    # checkout\n    # order\n    # paymentMethodType # Type: NON_NULL\n    customerIpAddress # IP address of the user who created the payment.  Requires one of the following permissions: MANAGE_ORDERS.\n    # chargeStatus # Internal payment status. # Type: NON_NULL\n    # actions # List of actions that can be performed in the current state of a payment.  Requires one of the following permissions: MANAGE_ORDERS. # Type: NON_NULL\n    # total # Total amount of the payment.\n    # capturedAmount # Total amount captured for this payment.\n    # transactions # List of all transactions within this payment.  Requires one of the following permissions: MANAGE_ORDERS. # Type: LIST\n    # availableCaptureAmount # Maximum amount of money that can be captured.  Requires one of the following permissions: MANAGE_ORDERS.\n    # availableRefundAmount # Maximum amount of money that can be refunded.  Requires one of the following permissions: MANAGE_ORDERS.\n    # creditCard # The details of the card used for this payment.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a payment by ID.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "payments",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query payments($filter: PaymentFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  payments(\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of payments.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "transaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query transaction($id: ID!) {\n  transaction(id: $id) {\n    __typename\n    # id # The ID of the object. # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # createdAt # Type: NON_NULL\n    # modifiedAt # Type: NON_NULL\n    # actions # List of actions that can be performed in the current state of a payment. # Type: NON_NULL\n    # authorizedAmount # Total amount authorized for this payment. # Type: NON_NULL\n    # refundedAmount # Total amount refunded for this payment. # Type: NON_NULL\n    # voidedAmount # Total amount voided for this payment. # Type: NON_NULL\n    # chargedAmount # Total amount charged for this payment. # Type: NON_NULL\n    # status # Status of transaction. # Type: NON_NULL\n    # type # Type of transaction. # Type: NON_NULL\n    # reference # Reference of transaction. # Type: NON_NULL\n    # order # The related order.  Added in Saleor 3.6.\n    # events # List of all transaction's events. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a transaction by ID.\n\nAdded in Saleor 3.6.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point.\n\nRequires one of the following permissions: HANDLE_PAYMENTS."
					},
					"response": []
				},
				{
					"name": "page",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query page($id: ID, $slug: String) {\n  page(id: $id, slug: $slug) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    seoTitle\n    seoDescription\n    # title # Type: NON_NULL\n    content # Content of the page.  Rich text format. For reference see https://editorjs.io/\n    publicationDate\n    publishedAt # The page publication date.  Added in Saleor 3.3.\n    # isPublished # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # pageType # Type: NON_NULL\n    # created # Type: NON_NULL\n    # contentJson # Content of the page.  Rich text format. For reference see https://editorjs.io/ # Type: NON_NULL\n    # translation # Returns translated page fields for the given language code.\n    # attributes # List of attributes assigned to this product. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a page by ID or slug."
					},
					"response": []
				},
				{
					"name": "pages",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query pages($sortBy: PageSortingInput, $filter: PageFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  pages(\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's pages."
					},
					"response": []
				},
				{
					"name": "pageType",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query pageType($id: ID!) {\n  pageType(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # attributes # Page attributes of that page type. # Type: LIST\n    # availableAttributes # Attributes that can be assigned to the page type.  Requires one of the following permissions: MANAGE_PAGES.\n    hasPages # Whether page type has pages assigned.  Requires one of the following permissions: MANAGE_PAGES.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a page type by ID."
					},
					"response": []
				},
				{
					"name": "pageTypes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query pageTypes($sortBy: PageTypeSortingInput, $filter: PageTypeFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  pageTypes(\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the page types."
					},
					"response": []
				},
				{
					"name": "homepageEvents",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query homepageEvents($before: String, $after: String, $first: Int, $last: Int) {\n  homepageEvents(before: $before, after: $after, first: $first, last: $last) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of activity events to display on homepage (at the moment it only contains order-events).\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query order($id: ID!) {\n  order(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # created # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n    # status # Type: NON_NULL\n    # user # User who placed the order. This field is set only for orders placed by authenticated users. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_USERS, MANAGE_ORDERS, OWNER.\n    # trackingClientId # Type: NON_NULL\n    # billingAddress # Billing address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    # shippingAddress # Shipping address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    shippingMethodName\n    collectionPointName\n    # channel # Type: NON_NULL\n    # fulfillments # List of shipments for the order. # Type: NON_NULL\n    # lines # List of order lines. # Type: NON_NULL\n    # actions # List of actions that can be performed in the current state of an order. # Type: NON_NULL\n    # availableShippingMethods # Shipping methods that can be used with this order. # Type: LIST\n    # shippingMethods # Shipping methods related to this order. # Type: NON_NULL\n    # availableCollectionPoints # Collection points that can be used for this order.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # invoices # List of order invoices. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. # Type: NON_NULL\n    # number # User-friendly number of an order. # Type: NON_NULL\n    original # The ID of the order that was the base for this order.\n    # origin # The order origin. # Type: NON_NULL\n    # isPaid # Informs if an order is fully paid. # Type: NON_NULL\n    # paymentStatus # Internal payment status. # Type: NON_NULL\n    # paymentStatusDisplay # User-friendly payment status. # Type: NON_NULL\n    # authorizeStatus # The authorize status of the order.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # chargeStatus # The charge status of the order.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # taxExemption # Returns True if order has to be exempt from taxes.  Added in Saleor 3.8.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # transactions # List of transactions for the order. Requires one of the following permissions: MANAGE_ORDERS, HANDLE_PAYMENTS.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # payments # List of payments for the order. # Type: NON_NULL\n    # total # Total amount of the order. # Type: NON_NULL\n    # undiscountedTotal # Undiscounted total amount of the order. # Type: NON_NULL\n    # shippingMethod # Shipping method for this order.\n    # shippingPrice # Total price of shipping. # Type: NON_NULL\n    # shippingTaxRate # Type: NON_NULL\n    # token # Type: NON_NULL\n    # voucher\n    # giftCards # List of user gift cards. # Type: NON_NULL\n    # displayGrossPrices # Type: NON_NULL\n    # customerNote # Type: NON_NULL\n    # weight # Type: NON_NULL\n    redirectUrl\n    # subtotal # The sum of line prices not including shipping. # Type: NON_NULL\n    # statusDisplay # User-friendly order status. # Type: NON_NULL\n    # canFinalize # Informs whether a draft order can be finalized(turned into a regular order). # Type: NON_NULL\n    # totalAuthorized # Amount authorized for the order. # Type: NON_NULL\n    # totalCaptured # Amount captured by payment. # Type: NON_NULL\n    # events # List of events associated with the order.  Requires one of the following permissions: MANAGE_ORDERS. # Type: NON_NULL\n    # totalBalance # The difference between the paid and the order total amount. # Type: NON_NULL\n    userEmail # Email address of the customer. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    # isShippingRequired # Returns True, if order requires shipping. # Type: NON_NULL\n    # deliveryMethod # The delivery method selected for this order.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: UNION\n    # languageCode # Type: NON_NULL\n    # languageCodeEnum # Order language code. # Type: NON_NULL\n    # discount # Returns applied discount.\n    discountName # Discount name.\n    translatedDiscountName # Translated discount name.\n    # discounts # List of all discounts assigned to the order. # Type: NON_NULL\n    # errors # List of errors that occurred during order validation. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an order by ID."
					},
					"response": []
				},
				{
					"name": "orders",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders($sortBy: OrderSortingInput, $filter: OrderFilterInput, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  orders(\n    sortBy: $sortBy\n    filter: $filter\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of orders.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrders",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query draftOrders($sortBy: OrderSortingInput, $filter: OrderDraftFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  draftOrders(\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of draft orders.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "ordersTotal",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query ordersTotal($period: ReportingPeriod, $channel: String) {\n  ordersTotal(period: $period, channel: $channel) {\n    __typename\n    # currency # Currency code. # Type: NON_NULL\n    # gross # Amount of money including taxes. # Type: NON_NULL\n    # net # Amount of money without taxes. # Type: NON_NULL\n    # tax # Amount of taxes. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"period\": null,\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Return the total sales amount from a specific period.\n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderByToken",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orderByToken($token: UUID!) {\n  orderByToken(token: $token) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # created # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n    # status # Type: NON_NULL\n    # user # User who placed the order. This field is set only for orders placed by authenticated users. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_USERS, MANAGE_ORDERS, OWNER.\n    # trackingClientId # Type: NON_NULL\n    # billingAddress # Billing address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    # shippingAddress # Shipping address. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    shippingMethodName\n    collectionPointName\n    # channel # Type: NON_NULL\n    # fulfillments # List of shipments for the order. # Type: NON_NULL\n    # lines # List of order lines. # Type: NON_NULL\n    # actions # List of actions that can be performed in the current state of an order. # Type: NON_NULL\n    # availableShippingMethods # Shipping methods that can be used with this order. # Type: LIST\n    # shippingMethods # Shipping methods related to this order. # Type: NON_NULL\n    # availableCollectionPoints # Collection points that can be used for this order.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # invoices # List of order invoices. Can be fetched for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER. # Type: NON_NULL\n    # number # User-friendly number of an order. # Type: NON_NULL\n    original # The ID of the order that was the base for this order.\n    # origin # The order origin. # Type: NON_NULL\n    # isPaid # Informs if an order is fully paid. # Type: NON_NULL\n    # paymentStatus # Internal payment status. # Type: NON_NULL\n    # paymentStatusDisplay # User-friendly payment status. # Type: NON_NULL\n    # authorizeStatus # The authorize status of the order.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # chargeStatus # The charge status of the order.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # taxExemption # Returns True if order has to be exempt from taxes.  Added in Saleor 3.8.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # transactions # List of transactions for the order. Requires one of the following permissions: MANAGE_ORDERS, HANDLE_PAYMENTS.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # payments # List of payments for the order. # Type: NON_NULL\n    # total # Total amount of the order. # Type: NON_NULL\n    # undiscountedTotal # Undiscounted total amount of the order. # Type: NON_NULL\n    # shippingMethod # Shipping method for this order.\n    # shippingPrice # Total price of shipping. # Type: NON_NULL\n    # shippingTaxRate # Type: NON_NULL\n    # token # Type: NON_NULL\n    # voucher\n    # giftCards # List of user gift cards. # Type: NON_NULL\n    # displayGrossPrices # Type: NON_NULL\n    # customerNote # Type: NON_NULL\n    # weight # Type: NON_NULL\n    redirectUrl\n    # subtotal # The sum of line prices not including shipping. # Type: NON_NULL\n    # statusDisplay # User-friendly order status. # Type: NON_NULL\n    # canFinalize # Informs whether a draft order can be finalized(turned into a regular order). # Type: NON_NULL\n    # totalAuthorized # Amount authorized for the order. # Type: NON_NULL\n    # totalCaptured # Amount captured by payment. # Type: NON_NULL\n    # events # List of events associated with the order.  Requires one of the following permissions: MANAGE_ORDERS. # Type: NON_NULL\n    # totalBalance # The difference between the paid and the order total amount. # Type: NON_NULL\n    userEmail # Email address of the customer. The full data can be access for orders created in Saleor 3.2 and later, for other orders requires one of the following permissions: MANAGE_ORDERS, OWNER.\n    # isShippingRequired # Returns True, if order requires shipping. # Type: NON_NULL\n    # deliveryMethod # The delivery method selected for this order.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: UNION\n    # languageCode # Type: NON_NULL\n    # languageCodeEnum # Order language code. # Type: NON_NULL\n    # discount # Returns applied discount.\n    discountName # Discount name.\n    translatedDiscountName # Translated discount name.\n    # discounts # List of all discounts assigned to the order. # Type: NON_NULL\n    # errors # List of errors that occurred during order validation. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an order by token."
					},
					"response": []
				},
				{
					"name": "menu",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query menu($channel: String, $id: ID, $name: String, $slug: String) {\n  menu(channel: $channel, id: $id, name: $name, slug: $slug) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # slug # Type: NON_NULL\n    # items # Type: LIST\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"id\": null,\n\t\"name\": null,\n\t\"slug\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a navigation menu by ID or name."
					},
					"response": []
				},
				{
					"name": "menus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query menus($channel: String, $sortBy: MenuSortingInput, $filter: MenuFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  menus(\n    channel: $channel\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the storefront's menus."
					},
					"response": []
				},
				{
					"name": "menuItem",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query menuItem($id: ID!, $channel: String) {\n  menuItem(id: $id, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # menu # Type: NON_NULL\n    # parent\n    # category\n    # collection # A collection associated with this menu item. Requires one of the following permissions to include the unpublished items: MANAGE_ORDERS, MANAGE_DISCOUNTS, MANAGE_PRODUCTS.\n    # page # A page associated with this menu item. Requires one of the following permissions to include unpublished items: MANAGE_PAGES.\n    # level # Type: NON_NULL\n    # children # Type: LIST\n    url # URL to the menu item.\n    # translation # Returns translated menu item fields for the given language code.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a menu item by ID."
					},
					"response": []
				},
				{
					"name": "menuItems",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query menuItems($channel: String, $sortBy: MenuItemSortingInput, $filter: MenuItemFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  menuItems(\n    channel: $channel\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the storefronts's menu items."
					},
					"response": []
				},
				{
					"name": "giftCard",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query giftCard($id: ID!) {\n  giftCard(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # displayCode # Code in format which allows displaying in a user interface. # Type: NON_NULL\n    # last4CodeChars # Last 4 characters of gift card code. # Type: NON_NULL\n    # code # Gift card code. Can be fetched by a staff member with MANAGE_GIFT_CARD when gift card wasn't yet used and by the gift card owner. # Type: NON_NULL\n    # created # Type: NON_NULL\n    # createdBy # The user who bought or issued a gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # usedBy # The customer who used a gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    createdByEmail # Email address of the user who bought or issued gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: MANAGE_USERS, OWNER.\n    usedByEmail # Email address of the customer who used a gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    lastUsedOn\n    expiryDate\n    # app # App which created the gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: MANAGE_APPS, OWNER.\n    # product # Related gift card product.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # events # List of events associated with the gift card.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: MANAGE_GIFT_CARD. # Type: NON_NULL\n    # tags # The gift card tag.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: MANAGE_GIFT_CARD. # Type: NON_NULL\n    boughtInChannel # Slug of the channel where the gift card was bought.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # isActive # Type: NON_NULL\n    # initialBalance # Type: NON_NULL\n    # currentBalance # Type: NON_NULL\n    # user # The customer who bought a gift card.\n    endDate # End date of gift card.\n    startDate # Start date of gift card.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a gift card by ID.\n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCards",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query giftCards($sortBy: GiftCardSortingInput, $filter: GiftCardFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  giftCards(\n    sortBy: $sortBy\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of gift cards.\n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardCurrencies",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query giftCardCurrencies {\n  giftCardCurrencies\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of gift card currencies.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point.\n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardTags",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query giftCardTags($filter: GiftCardTagFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  giftCardTags(\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of gift card tags.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point.\n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "plugin",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query plugin($id: ID!) {\n  plugin(id: $id) {\n    __typename\n    # id # Identifier of the plugin. # Type: NON_NULL\n    # name # Name of the plugin. # Type: NON_NULL\n    # description # Description of the plugin. # Type: NON_NULL\n    # globalConfiguration # Global configuration of the plugin (not channel-specific).\n    # channelConfigurations # Channel-specific plugin configuration. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a plugin by ID.\n\nRequires one of the following permissions: MANAGE_PLUGINS."
					},
					"response": []
				},
				{
					"name": "plugins",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query plugins($filter: PluginFilterInput, $sortBy: PluginSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  plugins(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of plugins.\n\nRequires one of the following permissions: MANAGE_PLUGINS."
					},
					"response": []
				},
				{
					"name": "sale",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query sale($id: ID!, $channel: String) {\n  sale(id: $id, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # name # Type: NON_NULL\n    # type # Type: NON_NULL\n    # startDate # Type: NON_NULL\n    endDate\n    # created # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n    # categories # List of categories this sale applies to.\n    # collections # List of collections this sale applies to.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # products # List of products this sale applies to.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # variants # List of product variants this sale applies to.  Added in Saleor 3.1.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # translation # Returns translated sale fields for the given language code.\n    # channelListings # List of channels available for the sale.  Requires one of the following permissions: MANAGE_DISCOUNTS. # Type: LIST\n    discountValue # Sale value.\n    currency # Currency code for sale.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a sale by ID.\n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "sales",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query sales($filter: SaleFilterInput, $sortBy: SaleSortingInput, $query: String, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  sales(\n    filter: $filter\n    sortBy: $sortBy\n    query: $query\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"query\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's sales.\n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucher",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query voucher($id: ID!, $channel: String) {\n  voucher(id: $id, channel: $channel) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    name\n    # code # Type: NON_NULL\n    usageLimit\n    # used # Type: NON_NULL\n    # startDate # Type: NON_NULL\n    endDate\n    # applyOncePerOrder # Type: NON_NULL\n    # applyOncePerCustomer # Type: NON_NULL\n    # onlyForStaff # Type: NON_NULL\n    minCheckoutItemsQuantity\n    # categories # List of categories this voucher applies to.\n    # collections # List of collections this voucher applies to.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # products # List of products this voucher applies to.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # variants # List of product variants this voucher applies to.  Added in Saleor 3.1.  Requires one of the following permissions: MANAGE_DISCOUNTS.\n    # countries # List of countries available for the shipping voucher. # Type: LIST\n    # translation # Returns translated voucher fields for the given language code.\n    # discountValueType # Determines a type of discount for voucher - value or percentage # Type: NON_NULL\n    discountValue # Voucher value.\n    currency # Currency code for voucher.\n    # minSpent # Minimum order value to apply voucher.\n    # type # Determines a type of voucher. # Type: NON_NULL\n    # channelListings # List of availability in channels for the voucher.  Requires one of the following permissions: MANAGE_DISCOUNTS. # Type: LIST\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"channel\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a voucher by ID.\n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "vouchers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query vouchers($filter: VoucherFilterInput, $sortBy: VoucherSortingInput, $query: String, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  vouchers(\n    filter: $filter\n    sortBy: $sortBy\n    query: $query\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"query\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's vouchers.\n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "exportFile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query exportFile($id: ID!) {\n  exportFile(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # status # Job status. # Type: NON_NULL\n    # createdAt # Created date time of job in ISO 8601 format. # Type: NON_NULL\n    # updatedAt # Date time of job last update in ISO 8601 format. # Type: NON_NULL\n    message # Job message.\n    url # The URL of field to download.\n    # events # List of events associated with the export. # Type: LIST\n    # user\n    # app\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a export file by ID.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "exportFiles",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query exportFiles($filter: ExportFileFilterInput, $sortBy: ExportFileSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  exportFiles(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of export files.\n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "taxTypes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query taxTypes {\n  taxTypes {\n    __typename\n    description # Description of the tax type.\n    taxCode # External tax code used to identify given tax group.\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of all tax rates available from tax gateway."
					},
					"response": []
				},
				{
					"name": "checkout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query checkout($id: ID, $token: UUID) {\n  checkout(id: $id, token: $token) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # created # Type: NON_NULL\n    # lastChange # Type: NON_NULL\n    # user\n    # channel # Type: NON_NULL\n    # billingAddress\n    # shippingAddress\n    # note # Type: NON_NULL\n    # discount\n    discountName\n    translatedDiscountName\n    voucherCode\n    # availableShippingMethods # Shipping methods that can be used with this checkout. # Type: NON_NULL\n    # shippingMethods # Shipping methods that can be used with this checkout. # Type: NON_NULL\n    # availableCollectionPoints # Collection points that can be used for this order.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # availablePaymentGateways # List of available payment gateways. # Type: NON_NULL\n    email # Email of a customer.\n    # giftCards # List of gift cards associated with this checkout. # Type: NON_NULL\n    # isShippingRequired # Returns True, if checkout requires shipping. # Type: NON_NULL\n    # quantity # The number of items purchased. # Type: NON_NULL\n    stockReservationExpires # Date when oldest stock reservation for this checkout expires or null if no stock is reserved.  Added in Saleor 3.1.\n    # lines # A list of checkout lines, each containing information about an item in the checkout. # Type: NON_NULL\n    # shippingPrice # The price of the shipping, with all the taxes included. # Type: NON_NULL\n    # shippingMethod # The shipping method related with checkout.\n    # deliveryMethod # The delivery method selected for this checkout.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: UNION\n    # subtotalPrice # The price of the checkout before shipping, with taxes included. # Type: NON_NULL\n    # taxExemption # Returns True if checkout has to be exempt from taxes.  Added in Saleor 3.8.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n    # token # The checkout's token. # Type: NON_NULL\n    # totalPrice # The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included. # Type: NON_NULL\n    # languageCode # Checkout language code. # Type: NON_NULL\n    # transactions # List of transactions for the checkout. Requires one of the following permissions: MANAGE_CHECKOUTS, HANDLE_PAYMENTS.  Added in Saleor 3.4.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: LIST\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a checkout by token and slug of channel."
					},
					"response": []
				},
				{
					"name": "checkouts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query checkouts($sortBy: CheckoutSortingInput, $filter: CheckoutFilterInput, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  checkouts(\n    sortBy: $sortBy\n    filter: $filter\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"sortBy\": null,\n\t\"filter\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of checkouts.\n\nRequires one of the following permissions: MANAGE_CHECKOUTS."
					},
					"response": []
				},
				{
					"name": "checkoutLines",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query checkoutLines($before: String, $after: String, $first: Int, $last: Int) {\n  checkoutLines(before: $before, after: $after, first: $first, last: $last) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of checkout lines.\n\nRequires one of the following permissions: MANAGE_CHECKOUTS."
					},
					"response": []
				},
				{
					"name": "channel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query channel($id: ID, $slug: String) {\n  channel(id: $id, slug: $slug) {\n    __typename\n    # id # Type: NON_NULL\n    # slug # Slug of the channel. # Type: NON_NULL\n    # name # Name of the channel.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # isActive # Whether the channel is active.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # currencyCode # A currency that is assigned to the channel.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # hasOrders # Whether a channel has associated orders.  Requires one of the following permissions: MANAGE_CHANNELS. # Type: NON_NULL\n    # defaultCountry # Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.  Added in Saleor 3.1.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # warehouses # List of warehouses assigned to this channel.  Added in Saleor 3.5.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # countries # List of shippable countries for the channel.  Added in Saleor 3.6.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: LIST\n    # availableShippingMethodsPerCountry # Shipping methods that are available for the channel.  Added in Saleor 3.6.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: LIST\n    # stockSettings # Define the stock setting for this channel.  Added in Saleor 3.7.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a channel by ID or slug."
					},
					"response": []
				},
				{
					"name": "channels",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query channels {\n  channels {\n    __typename\n    # id # Type: NON_NULL\n    # slug # Slug of the channel. # Type: NON_NULL\n    # name # Name of the channel.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # isActive # Whether the channel is active.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # currencyCode # A currency that is assigned to the channel.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # hasOrders # Whether a channel has associated orders.  Requires one of the following permissions: MANAGE_CHANNELS. # Type: NON_NULL\n    # defaultCountry # Default country for the channel. Default country can be used in checkout to determine the stock quantities or calculate taxes when the country was not explicitly provided.  Added in Saleor 3.1.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # warehouses # List of warehouses assigned to this channel.  Added in Saleor 3.5.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n    # countries # List of shippable countries for the channel.  Added in Saleor 3.6.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: LIST\n    # availableShippingMethodsPerCountry # Shipping methods that are available for the channel.  Added in Saleor 3.6.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: LIST\n    # stockSettings # Define the stock setting for this channel.  Added in Saleor 3.7.  Note: this API is currently in Feature Preview and can be subject to changes at later point.  Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of all channels.\n\nRequires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER."
					},
					"response": []
				},
				{
					"name": "attributes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query attributes($filter: AttributeFilterInput, $sortBy: AttributeSortingInput, $channel: String, $before: String, $after: String, $first: Int, $last: Int) {\n  attributes(\n    filter: $filter\n    sortBy: $sortBy\n    channel: $channel\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"channel\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's attributes."
					},
					"response": []
				},
				{
					"name": "attribute",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query attribute($id: ID, $slug: String) {\n  attribute(id: $id, slug: $slug) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    inputType # The input type to use for entering attribute values in the dashboard.\n    entityType # The entity type which can be used as a reference.\n    name # Name of an attribute displayed in the interface.\n    slug # Internal representation of an attribute name.\n    type # The attribute type.\n    unit # The unit of attribute values.\n    # choices # List of attribute's values.\n    # valueRequired # Whether the attribute requires values to be passed or not. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # visibleInStorefront # Whether the attribute should be visible or not in storefront. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # filterableInStorefront # Whether the attribute can be filtered in storefront. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # filterableInDashboard # Whether the attribute can be filtered in dashboard. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # availableInGrid # Whether the attribute can be displayed in the admin product list. Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # storefrontSearchPosition # The position of the attribute in the storefront navigation (0 by default). Requires one of the following permissions: MANAGE_PAGES, MANAGE_PAGE_TYPES_AND_ATTRIBUTES, MANAGE_PRODUCTS, MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES. # Type: NON_NULL\n    # translation # Returns translated attribute fields for the given language code.\n    # withChoices # Flag indicating that attribute has predefined choices. # Type: NON_NULL\n    # productTypes # Type: NON_NULL\n    # productVariantTypes # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"slug\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an attribute by ID."
					},
					"response": []
				},
				{
					"name": "appsInstallations",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query appsInstallations {\n  appsInstallations {\n    __typename\n    # id # Type: NON_NULL\n    # status # Job status. # Type: NON_NULL\n    # createdAt # Created date time of job in ISO 8601 format. # Type: NON_NULL\n    # updatedAt # Date time of job last update in ISO 8601 format. # Type: NON_NULL\n    message # Job message.\n    # appName # Type: NON_NULL\n    # manifestUrl # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of all apps installations\n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "apps",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query apps($filter: AppFilterInput, $sortBy: AppSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  apps(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the apps.\n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER, MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "app",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query app($id: ID) {\n  app(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # permissions # List of the app's permissions. # Type: LIST\n    created # The date and time when the app was created.\n    isActive # Determine if app will be set active or not.\n    name # Name of the app.\n    type # Type of the app.\n    # tokens # Last 4 characters of the tokens.  Requires one of the following permissions: MANAGE_APPS, OWNER. # Type: LIST\n    # webhooks # List of webhooks assigned to this app.  Requires one of the following permissions: MANAGE_APPS, OWNER. # Type: LIST\n    aboutApp # Description of this app.\n    dataPrivacy # Description of the data privacy defined for this app.\n    dataPrivacyUrl # URL to details about the privacy policy on the app owner page.\n    homepageUrl # Homepage of the app.\n    supportUrl # Support page for the app.\n    configurationUrl # URL to iframe with the configuration for the app.\n    appUrl # URL to iframe with the app.\n    manifestUrl # URL to manifest used during app's installation.  Added in Saleor 3.5.\n    version # Version number of the app.\n    accessToken # JWT token used to authenticate by thridparty app.\n    # extensions # App's dashboard extensions.  Added in Saleor 3.1.  Note: this API is currently in Feature Preview and can be subject to changes at later point. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an app by ID. If ID is not provided, return the currently authenticated app.\n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER AUTHENTICATED_APP. The authenticated app has access to its resources. Fetching different apps requires MANAGE_APPS permission."
					},
					"response": []
				},
				{
					"name": "appExtensions",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query appExtensions($filter: AppExtensionFilterInput, $before: String, $after: String, $first: Int, $last: Int) {\n  appExtensions(\n    filter: $filter\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of all extensions.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point.\n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP."
					},
					"response": []
				},
				{
					"name": "appExtension",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query appExtension($id: ID!) {\n  appExtension(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # permissions # List of the app extension's permissions. # Type: NON_NULL\n    # label # Label of the extension to show in the dashboard. # Type: NON_NULL\n    # url # URL of a view where extension's iframe is placed. # Type: NON_NULL\n    # mount # Place where given extension will be mounted. # Type: NON_NULL\n    # target # Type of way how app extension will be opened. # Type: NON_NULL\n    # app # Type: NON_NULL\n    accessToken # JWT token used to authenticate by thridparty app extension.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an app extension by ID.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point.\n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER, AUTHENTICATED_APP."
					},
					"response": []
				},
				{
					"name": "addressValidationRules",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query addressValidationRules($countryCode: CountryCode!, $countryArea: String, $city: String, $cityArea: String) {\n  addressValidationRules(\n    countryCode: $countryCode\n    countryArea: $countryArea\n    city: $city\n    cityArea: $cityArea\n  ) {\n    __typename\n    # countryCode # Type: NON_NULL\n    # countryName # Type: NON_NULL\n    # addressFormat # Type: NON_NULL\n    # addressLatinFormat # Type: NON_NULL\n    # allowedFields # Type: NON_NULL\n    # requiredFields # Type: NON_NULL\n    # upperFields # Type: NON_NULL\n    # countryAreaType # Type: NON_NULL\n    # countryAreaChoices # Type: NON_NULL\n    # cityType # Type: NON_NULL\n    # cityChoices # Type: NON_NULL\n    # cityAreaType # Type: NON_NULL\n    # cityAreaChoices # Type: NON_NULL\n    # postalCodeType # Type: NON_NULL\n    # postalCodeMatchers # Type: NON_NULL\n    # postalCodeExamples # Type: NON_NULL\n    # postalCodePrefix # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"countryCode\": null,\n\t\"countryArea\": null,\n\t\"city\": null,\n\t\"cityArea\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Returns address validation rules."
					},
					"response": []
				},
				{
					"name": "address",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query address($id: ID!) {\n  address(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # firstName # Type: NON_NULL\n    # lastName # Type: NON_NULL\n    # companyName # Type: NON_NULL\n    # streetAddress1 # Type: NON_NULL\n    # streetAddress2 # Type: NON_NULL\n    # city # Type: NON_NULL\n    # cityArea # Type: NON_NULL\n    # postalCode # Type: NON_NULL\n    # country # Shop's default country. # Type: NON_NULL\n    # countryArea # Type: NON_NULL\n    phone\n    isDefaultShippingAddress # Address is user's default shipping address.\n    isDefaultBillingAddress # Address is user's default billing address.\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up an address by ID."
					},
					"response": []
				},
				{
					"name": "customers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query customers($filter: CustomerFilterInput, $sortBy: UserSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  customers(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's customers.\n\nRequires one of the following permissions: MANAGE_ORDERS, MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "permissionGroups",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query permissionGroups($filter: PermissionGroupFilterInput, $sortBy: PermissionGroupSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  permissionGroups(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of permission groups.\n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "permissionGroup",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query permissionGroup($id: ID!) {\n  permissionGroup(id: $id) {\n    __typename\n    # id # Type: NON_NULL\n    # name # Type: NON_NULL\n    # users # List of group users  Requires one of the following permissions: MANAGE_STAFF. # Type: LIST\n    # permissions # List of group permissions # Type: LIST\n    # userCanManage # True, if the currently authenticated user has rights to manage a group. # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up permission group by ID.\n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "me",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query me {\n  me {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # email # Type: NON_NULL\n    # firstName # Type: NON_NULL\n    # lastName # Type: NON_NULL\n    # isStaff # Type: NON_NULL\n    # isActive # Type: NON_NULL\n    # addresses # List of all user's addresses. # Type: NON_NULL\n    # checkout # Returns the last open checkout of this user.\n    # checkoutTokens # Returns the checkout UUID's assigned to this user. # Type: LIST\n    # checkoutIds # Returns the checkout ID's assigned to this user. # Type: LIST\n    # checkouts # Returns checkouts assigned to this user.  Added in Saleor 3.8.\n    # giftCards # List of the user gift cards.\n    note # A note about the customer.  Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.\n    # orders # List of user's orders. Requires one of the following permissions: MANAGE_STAFF, OWNER.\n    # userPermissions # List of user's permissions. # Type: LIST\n    # permissionGroups # List of user's permission groups. # Type: LIST\n    # editableGroups # List of user's permission groups which user can manage. # Type: LIST\n    # avatar\n    # events # List of events associated with the user.  Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF. # Type: LIST\n    # storedPaymentSources # List of stored payment sources. # Type: LIST\n    # languageCode # User language code. # Type: NON_NULL\n    # defaultShippingAddress\n    # defaultBillingAddress\n    lastLogin\n    # dateJoined # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Return the currently authenticated user."
					},
					"response": []
				},
				{
					"name": "staffUsers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query staffUsers($filter: StaffUserInput, $sortBy: UserSortingInput, $before: String, $after: String, $first: Int, $last: Int) {\n  staffUsers(\n    filter: $filter\n    sortBy: $sortBy\n    before: $before\n    after: $after\n    first: $first\n    last: $last\n  ) {\n    __typename\n    # pageInfo # Pagination data for this connection. # Type: NON_NULL\n    # edges # Type: NON_NULL\n    totalCount # A total count of items in the collection.\n  }\n}",
								"variables": "{\n\t\"filter\": null,\n\t\"sortBy\": null,\n\t\"before\": null,\n\t\"after\": null,\n\t\"first\": null,\n\t\"last\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "List of the shop's staff users.\n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query user($id: ID, $email: String) {\n  user(id: $id, email: $email) {\n    __typename\n    # id # Type: NON_NULL\n    # privateMetadata # List of private metadata items. Requires staff permissions to access. # Type: NON_NULL\n    privateMetafield # A single key from private metadata. Requires staff permissions to access.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    privateMetafields # Private metadata. Requires staff permissions to access. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # metadata # List of public metadata items. Can be accessed without permissions. # Type: NON_NULL\n    metafield # A single key from public metadata.  Tip: Use GraphQL aliases to fetch multiple keys.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    metafields # Public metadata. Use `keys` to control which fields you want to include. The default is to include everything.  Added in Saleor 3.3.  Note: this API is currently in Feature Preview and can be subject to changes at later point.\n    # email # Type: NON_NULL\n    # firstName # Type: NON_NULL\n    # lastName # Type: NON_NULL\n    # isStaff # Type: NON_NULL\n    # isActive # Type: NON_NULL\n    # addresses # List of all user's addresses. # Type: NON_NULL\n    # checkout # Returns the last open checkout of this user.\n    # checkoutTokens # Returns the checkout UUID's assigned to this user. # Type: LIST\n    # checkoutIds # Returns the checkout ID's assigned to this user. # Type: LIST\n    # checkouts # Returns checkouts assigned to this user.  Added in Saleor 3.8.\n    # giftCards # List of the user gift cards.\n    note # A note about the customer.  Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF.\n    # orders # List of user's orders. Requires one of the following permissions: MANAGE_STAFF, OWNER.\n    # userPermissions # List of user's permissions. # Type: LIST\n    # permissionGroups # List of user's permission groups. # Type: LIST\n    # editableGroups # List of user's permission groups which user can manage. # Type: LIST\n    # avatar\n    # events # List of events associated with the user.  Requires one of the following permissions: MANAGE_USERS, MANAGE_STAFF. # Type: LIST\n    # storedPaymentSources # List of stored payment sources. # Type: LIST\n    # languageCode # User language code. # Type: NON_NULL\n    # defaultShippingAddress\n    # defaultBillingAddress\n    lastLogin\n    # dateJoined # Type: NON_NULL\n    # updatedAt # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"email\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Look up a user by ID or email address.\n\nRequires one of the following permissions: MANAGE_STAFF, MANAGE_USERS, MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "_entities",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query _entities($representations: [_Any]) {\n  _entities(representations: $representations)\n}",
								"variables": "{\n\t\"representations\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": null
					},
					"response": []
				},
				{
					"name": "_service",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query _service {\n  _service {\n    __typename\n    sdl\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": null
					},
					"response": []
				}
			]
		},
		{
			"name": "Mutations",
			"item": [
				{
					"name": "webhookCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation webhookCreate($input: WebhookCreateInput!) {\n  webhookCreate(input: $input) {\n    __typename\n    # webhookErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # webhook\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new webhook subscription. \n\nRequires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP."
					},
					"response": []
				},
				{
					"name": "webhookDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation webhookDelete($id: ID!) {\n  webhookDelete(id: $id) {\n    __typename\n    # webhookErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # webhook\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a webhook subscription. \n\nRequires one of the following permissions: MANAGE_APPS, AUTHENTICATED_APP."
					},
					"response": []
				},
				{
					"name": "webhookUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation webhookUpdate($id: ID!, $input: WebhookUpdateInput!) {\n  webhookUpdate(id: $id, input: $input) {\n    __typename\n    # webhookErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # webhook\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a webhook subscription. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "eventDeliveryRetry",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation eventDeliveryRetry($id: ID!) {\n  eventDeliveryRetry(id: $id) {\n    __typename\n    # delivery # Event delivery.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Retries event delivery. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "createWarehouse",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createWarehouse($input: WarehouseCreateInput!) {\n  createWarehouse(input: $input) {\n    __typename\n    # warehouseErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # warehouse\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates new warehouse. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "updateWarehouse",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateWarehouse($id: ID!, $input: WarehouseUpdateInput!) {\n  updateWarehouse(id: $id, input: $input) {\n    __typename\n    # warehouseErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # warehouse\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates given warehouse. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "deleteWarehouse",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteWarehouse($id: ID!) {\n  deleteWarehouse(id: $id) {\n    __typename\n    # warehouseErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # warehouse\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes selected warehouse. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "assignWarehouseShippingZone",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation assignWarehouseShippingZone($id: ID!, $shippingZoneIds: [ID!]!) {\n  assignWarehouseShippingZone(id: $id, shippingZoneIds: $shippingZoneIds) {\n    __typename\n    # warehouseErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # warehouse\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"shippingZoneIds\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Add shipping zone to given warehouse. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "unassignWarehouseShippingZone",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation unassignWarehouseShippingZone($id: ID!, $shippingZoneIds: [ID!]!) {\n  unassignWarehouseShippingZone(id: $id, shippingZoneIds: $shippingZoneIds) {\n    __typename\n    # warehouseErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # warehouse\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"shippingZoneIds\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove shipping zone from given warehouse. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "taxExemptionManage",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation taxExemptionManage($id: ID!, $taxExemption: Boolean!) {\n  taxExemptionManage(id: $id, taxExemption: $taxExemption) {\n    __typename\n    # taxableObject # Type: UNION\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"taxExemption\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Exempt checkout or order from charging the taxes. When tax exemption is enabled, taxes won't be charged for the checkout or order. Taxes may still be calculated in cases when product prices are entered with the tax included and the net price needs to be known.\n\nAdded in Saleor 3.8.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_TAXES."
					},
					"response": []
				},
				{
					"name": "staffNotificationRecipientCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffNotificationRecipientCreate($input: StaffNotificationRecipientInput!) {\n  staffNotificationRecipientCreate(input: $input) {\n    __typename\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # staffNotificationRecipient\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new staff notification recipient. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "staffNotificationRecipientUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffNotificationRecipientUpdate($id: ID!, $input: StaffNotificationRecipientInput!) {\n  staffNotificationRecipientUpdate(id: $id, input: $input) {\n    __typename\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # staffNotificationRecipient\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a staff notification recipient. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "staffNotificationRecipientDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffNotificationRecipientDelete($id: ID!) {\n  staffNotificationRecipientDelete(id: $id) {\n    __typename\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # staffNotificationRecipient\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete staff notification recipient. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "shopDomainUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shopDomainUpdate($input: SiteDomainInput) {\n  shopDomainUpdate(input: $input) {\n    __typename\n    # shop # Updated shop.\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates site domain of the shop. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "shopSettingsUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shopSettingsUpdate($input: ShopSettingsInput!) {\n  shopSettingsUpdate(input: $input) {\n    __typename\n    # shop # Updated shop.\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates shop settings. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "shopFetchTaxRates",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shopFetchTaxRates {\n  shopFetchTaxRates {\n    __typename\n    # shop # Updated shop.\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Fetch tax rates. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "shopSettingsTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shopSettingsTranslate($input: ShopSettingsTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  shopSettingsTranslate(input: $input, languageCode: $languageCode) {\n    __typename\n    # shop # Updated shop settings.\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for shop settings. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "shopAddressUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shopAddressUpdate($input: AddressInput) {\n  shopAddressUpdate(input: $input) {\n    __typename\n    # shop # Updated shop.\n    # shopErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update the shop's address. If the `null` value is passed, the currently selected address will be deleted. \n\nRequires one of the following permissions: MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "orderSettingsUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderSettingsUpdate($input: OrderSettingsUpdateInput!) {\n  orderSettingsUpdate(input: $input) {\n    __typename\n    # orderSettings # Order settings.\n    # orderSettingsErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update shop order settings. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "giftCardSettingsUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardSettingsUpdate($input: GiftCardSettingsUpdateInput!) {\n  giftCardSettingsUpdate(input: $input) {\n    __typename\n    # giftCardSettings # Gift card settings.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update gift card settings. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "shippingMethodChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingMethodChannelListingUpdate($id: ID!, $input: ShippingMethodChannelListingInput!) {\n  shippingMethodChannelListingUpdate(id: $id, input: $input) {\n    __typename\n    # shippingMethod # An updated shipping method instance.\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage shipping method's availability in channels. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceCreate($input: ShippingPriceInput!) {\n  shippingPriceCreate(input: $input) {\n    __typename\n    # shippingZone # A shipping zone to which the shipping method belongs.\n    # shippingMethod\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new shipping price. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceDelete($id: ID!) {\n  shippingPriceDelete(id: $id) {\n    __typename\n    # shippingMethod # A shipping method to delete.\n    # shippingZone # A shipping zone to which the shipping method belongs.\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a shipping price. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceBulkDelete($ids: [ID!]!) {\n  shippingPriceBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes shipping prices. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceUpdate($id: ID!, $input: ShippingPriceInput!) {\n  shippingPriceUpdate(id: $id, input: $input) {\n    __typename\n    # shippingZone # A shipping zone to which the shipping method belongs.\n    # shippingMethod\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a new shipping price. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceTranslate($id: ID!, $input: ShippingPriceTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  shippingPriceTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # shippingMethod\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a shipping method. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "shippingPriceExcludeProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceExcludeProducts($id: ID!, $input: ShippingPriceExcludeProductsInput!) {\n  shippingPriceExcludeProducts(id: $id, input: $input) {\n    __typename\n    # shippingMethod # A shipping method with new list of excluded products.\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Exclude products from shipping price. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingPriceRemoveProductFromExclude",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingPriceRemoveProductFromExclude($id: ID!, $products: [ID!]!) {\n  shippingPriceRemoveProductFromExclude(id: $id, products: $products) {\n    __typename\n    # shippingMethod # A shipping method with new list of excluded products.\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"products\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove product from excluded list for shipping price. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingZoneCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingZoneCreate($input: ShippingZoneCreateInput!) {\n  shippingZoneCreate(input: $input) {\n    __typename\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # shippingZone\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new shipping zone. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingZoneDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingZoneDelete($id: ID!) {\n  shippingZoneDelete(id: $id) {\n    __typename\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # shippingZone\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a shipping zone. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingZoneBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingZoneBulkDelete($ids: [ID!]!) {\n  shippingZoneBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes shipping zones. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "shippingZoneUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation shippingZoneUpdate($id: ID!, $input: ShippingZoneUpdateInput!) {\n  shippingZoneUpdate(id: $id, input: $input) {\n    __typename\n    # shippingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # shippingZone\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a new shipping zone. \n\nRequires one of the following permissions: MANAGE_SHIPPING."
					},
					"response": []
				},
				{
					"name": "productAttributeAssign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productAttributeAssign($operations: [ProductAttributeAssignInput!]!, $productTypeId: ID!) {\n  productAttributeAssign(operations: $operations, productTypeId: $productTypeId) {\n    __typename\n    # productType # The updated product type.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"operations\": [null],\n\t\"productTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Assign attributes to a given product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productAttributeAssignmentUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productAttributeAssignmentUpdate($operations: [ProductAttributeAssignmentUpdateInput!]!, $productTypeId: ID!) {\n  productAttributeAssignmentUpdate(\n    operations: $operations\n    productTypeId: $productTypeId\n  ) {\n    __typename\n    # productType # The updated product type.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"operations\": [null],\n\t\"productTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update attributes assigned to product variant for given product type.\n\nAdded in Saleor 3.1. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productAttributeUnassign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productAttributeUnassign($attributeIds: [ID!]!, $productTypeId: ID!) {\n  productAttributeUnassign(\n    attributeIds: $attributeIds\n    productTypeId: $productTypeId\n  ) {\n    __typename\n    # productType # The updated product type.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeIds\": [\"0\"],\n\t\"productTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Un-assign attributes from a given product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "categoryCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation categoryCreate($input: CategoryInput!, $parent: ID) {\n  categoryCreate(input: $input, parent: $parent) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # category\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"parent\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new category. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "categoryDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation categoryDelete($id: ID!) {\n  categoryDelete(id: $id) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # category\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a category. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "categoryBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation categoryBulkDelete($ids: [ID!]!) {\n  categoryBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes categories. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "categoryUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation categoryUpdate($id: ID!, $input: CategoryInput!) {\n  categoryUpdate(id: $id, input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # category\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a category. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "categoryTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation categoryTranslate($id: ID!, $input: TranslationInput!, $languageCode: LanguageCodeEnum!) {\n  categoryTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # category\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a category. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "collectionAddProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionAddProducts($collectionId: ID!, $products: [ID!]!) {\n  collectionAddProducts(collectionId: $collectionId, products: $products) {\n    __typename\n    # collection # Collection to which products will be added.\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"collectionId\": \"0\",\n\t\"products\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds products to a collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionCreate($input: CollectionCreateInput!) {\n  collectionCreate(input: $input) {\n    __typename\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # collection\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionDelete($id: ID!) {\n  collectionDelete(id: $id) {\n    __typename\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # collection\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionReorderProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionReorderProducts($collectionId: ID!, $moves: [MoveProductInput!]!) {\n  collectionReorderProducts(collectionId: $collectionId, moves: $moves) {\n    __typename\n    # collection # Collection from which products are reordered.\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"collectionId\": \"0\",\n\t\"moves\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the products of a collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionBulkDelete($ids: [ID!]!) {\n  collectionBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes collections. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionRemoveProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionRemoveProducts($collectionId: ID!, $products: [ID!]!) {\n  collectionRemoveProducts(collectionId: $collectionId, products: $products) {\n    __typename\n    # collection # Collection from which products will be removed.\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"collectionId\": \"0\",\n\t\"products\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove products from a collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionUpdate($id: ID!, $input: CollectionInput!) {\n  collectionUpdate(id: $id, input: $input) {\n    __typename\n    # collectionErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # collection\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a collection. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "collectionTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionTranslate($id: ID!, $input: TranslationInput!, $languageCode: LanguageCodeEnum!) {\n  collectionTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # collection\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a collection. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "collectionChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation collectionChannelListingUpdate($id: ID!, $input: CollectionChannelListingUpdateInput!) {\n  collectionChannelListingUpdate(id: $id, input: $input) {\n    __typename\n    # collection # An updated collection instance.\n    # collectionChannelListingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage collection's availability in channels. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productCreate($input: ProductCreateInput!) {\n  productCreate(input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # product\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productDelete($id: ID!) {\n  productDelete(id: $id) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # product\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productBulkDelete($ids: [ID!]!) {\n  productBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes products. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productUpdate($id: ID!, $input: ProductInput!) {\n  productUpdate(id: $id, input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # product\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTranslate($id: ID!, $input: TranslationInput!, $languageCode: LanguageCodeEnum!) {\n  productTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # product\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a product. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "productChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productChannelListingUpdate($id: ID!, $input: ProductChannelListingUpdateInput!) {\n  productChannelListingUpdate(id: $id, input: $input) {\n    __typename\n    # product # An updated product instance.\n    # productChannelListingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage product's availability in channels. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productMediaCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productMediaCreate($input: ProductMediaCreateInput!) {\n  productMediaCreate(input: $input) {\n    __typename\n    # product\n    # media\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a media object (image or video URL) associated with product. For image, this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantReorder",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantReorder($moves: [ReorderInput!]!, $productId: ID!) {\n  productVariantReorder(moves: $moves, productId: $productId) {\n    __typename\n    # product\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"moves\": [null],\n\t\"productId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productMediaDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productMediaDelete($id: ID!) {\n  productMediaDelete(id: $id) {\n    __typename\n    # product\n    # media\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a product media. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productMediaBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productMediaBulkDelete($ids: [ID!]!) {\n  productMediaBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes product media. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productMediaReorder",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productMediaReorder($mediaIds: [ID!]!, $productId: ID!) {\n  productMediaReorder(mediaIds: $mediaIds, productId: $productId) {\n    __typename\n    # product\n    # media # Type: LIST\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"mediaIds\": [\"0\"],\n\t\"productId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Changes ordering of the product media. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productMediaUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productMediaUpdate($id: ID!, $input: ProductMediaUpdateInput!) {\n  productMediaUpdate(id: $id, input: $input) {\n    __typename\n    # product\n    # media\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a product media. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productTypeCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTypeCreate($input: ProductTypeInput!) {\n  productTypeCreate(input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productType\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productTypeDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTypeDelete($id: ID!) {\n  productTypeDelete(id: $id) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productType\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productTypeBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTypeBulkDelete($ids: [ID!]!) {\n  productTypeBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes product types. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productTypeUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTypeUpdate($id: ID!, $input: ProductTypeInput!) {\n  productTypeUpdate(id: $id, input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productType\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productTypeReorderAttributes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productTypeReorderAttributes($moves: [ReorderInput!]!, $productTypeId: ID!, $type: ProductAttributeType!) {\n  productTypeReorderAttributes(\n    moves: $moves\n    productTypeId: $productTypeId\n    type: $type\n  ) {\n    __typename\n    # productType # Product type from which attributes are reordered.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"moves\": [null],\n\t\"productTypeId\": \"0\",\n\t\"type\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the attributes of a product type. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "productReorderAttributeValues",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productReorderAttributeValues($attributeId: ID!, $moves: [ReorderInput!]!, $productId: ID!) {\n  productReorderAttributeValues(\n    attributeId: $attributeId\n    moves: $moves\n    productId: $productId\n  ) {\n    __typename\n    # product # Product from which attribute values are reordered.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeId\": \"0\",\n\t\"moves\": [null],\n\t\"productId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder product attribute values. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "digitalContentCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation digitalContentCreate($input: DigitalContentUploadInput!, $variantId: ID!) {\n  digitalContentCreate(input: $input, variantId: $variantId) {\n    __typename\n    # variant\n    # content\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "digitalContentDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation digitalContentDelete($variantId: ID!) {\n  digitalContentDelete(variantId: $variantId) {\n    __typename\n    # variant\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove digital content assigned to given variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "digitalContentUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation digitalContentUpdate($input: DigitalContentInput!, $variantId: ID!) {\n  digitalContentUpdate(input: $input, variantId: $variantId) {\n    __typename\n    # variant\n    # content\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update digital content. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "digitalContentUrlCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation digitalContentUrlCreate($input: DigitalContentUrlCreateInput!) {\n  digitalContentUrlCreate(input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # digitalContentUrl\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Generate new URL to digital content. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantCreate($input: ProductVariantCreateInput!) {\n  productVariantCreate(input: $input) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productVariant\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new variant for a product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantDelete($id: ID, $sku: String) {\n  productVariantDelete(id: $id, sku: $sku) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productVariant\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"sku\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantBulkCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantBulkCreate($product: ID!, $variants: [ProductVariantBulkCreateInput!]!) {\n  productVariantBulkCreate(product: $product, variants: $variants) {\n    __typename\n    # count # Returns how many objects were created. # Type: NON_NULL\n    # productVariants # List of the created variants. # Type: NON_NULL\n    # bulkProductErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"product\": \"0\",\n\t\"variants\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates product variants for a given product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantBulkDelete($ids: [ID]!, $skus: [String]!) {\n  productVariantBulkDelete(ids: $ids, skus: $skus) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"],\n\t\"skus\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes product variants. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantStocksCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantStocksCreate($stocks: [StockInput!]!, $variantId: ID!) {\n  productVariantStocksCreate(stocks: $stocks, variantId: $variantId) {\n    __typename\n    # productVariant # Updated product variant.\n    # bulkStockErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"stocks\": [null],\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates stocks for product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantStocksDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantStocksDelete($sku: String, $variantId: ID, $warehouseIds: [ID]!) {\n  productVariantStocksDelete(\n    sku: $sku\n    variantId: $variantId\n    warehouseIds: $warehouseIds\n  ) {\n    __typename\n    # productVariant # Updated product variant.\n    # stockErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"sku\": null,\n\t\"variantId\": null,\n\t\"warehouseIds\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete stocks from product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantStocksUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantStocksUpdate($sku: String, $stocks: [StockInput!]!, $variantId: ID) {\n  productVariantStocksUpdate(sku: $sku, stocks: $stocks, variantId: $variantId) {\n    __typename\n    # productVariant # Updated product variant.\n    # bulkStockErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"sku\": null,\n\t\"stocks\": [null],\n\t\"variantId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update stocks for product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantUpdate($id: ID, $input: ProductVariantInput!, $sku: String) {\n  productVariantUpdate(id: $id, input: $input, sku: $sku) {\n    __typename\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productVariant\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"input\": null,\n\t\"sku\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing variant for product. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantSetDefault",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantSetDefault($productId: ID!, $variantId: ID!) {\n  productVariantSetDefault(productId: $productId, variantId: $variantId) {\n    __typename\n    # product\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"productId\": \"0\",\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantTranslate($id: ID!, $input: NameTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  productVariantTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # productVariant\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a product variant. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "productVariantChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantChannelListingUpdate($id: ID, $input: [ProductVariantChannelListingAddInput!]!, $sku: String) {\n  productVariantChannelListingUpdate(id: $id, input: $input, sku: $sku) {\n    __typename\n    # variant # An updated product variant instance.\n    # productChannelListingErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"input\": [null],\n\t\"sku\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage product variant prices in channels. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantReorderAttributeValues",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantReorderAttributeValues($attributeId: ID!, $moves: [ReorderInput!]!, $variantId: ID!) {\n  productVariantReorderAttributeValues(\n    attributeId: $attributeId\n    moves: $moves\n    variantId: $variantId\n  ) {\n    __typename\n    # productVariant # Product variant from which attribute values are reordered.\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeId\": \"0\",\n\t\"moves\": [null],\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder product variant attribute values. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "productVariantPreorderDeactivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation productVariantPreorderDeactivate($id: ID!) {\n  productVariantPreorderDeactivate(id: $id) {\n    __typename\n    # productVariant # Product variant with ended preorder.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivates product variant preorder. It changes all preorder allocation into regular allocation.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "variantMediaAssign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation variantMediaAssign($mediaId: ID!, $variantId: ID!) {\n  variantMediaAssign(mediaId: $mediaId, variantId: $variantId) {\n    __typename\n    # productVariant\n    # media\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"mediaId\": \"0\",\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Assign an media to a product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "variantMediaUnassign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation variantMediaUnassign($mediaId: ID!, $variantId: ID!) {\n  variantMediaUnassign(mediaId: $mediaId, variantId: $variantId) {\n    __typename\n    # productVariant\n    # media\n    # productErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"mediaId\": \"0\",\n\t\"variantId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Unassign an media from a product variant. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "paymentCapture",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation paymentCapture($amount: PositiveDecimal, $paymentId: ID!) {\n  paymentCapture(amount: $amount, paymentId: $paymentId) {\n    __typename\n    # payment # Updated payment.\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"amount\": null,\n\t\"paymentId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Captures the authorized payment amount. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "paymentRefund",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation paymentRefund($amount: PositiveDecimal, $paymentId: ID!) {\n  paymentRefund(amount: $amount, paymentId: $paymentId) {\n    __typename\n    # payment # Updated payment.\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"amount\": null,\n\t\"paymentId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Refunds the captured payment amount. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "paymentVoid",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation paymentVoid($paymentId: ID!) {\n  paymentVoid(paymentId: $paymentId) {\n    __typename\n    # payment # Updated payment.\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"paymentId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Voids the authorized payment. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "paymentInitialize",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation paymentInitialize($channel: String, $gateway: String!, $paymentData: JSONString) {\n  paymentInitialize(\n    channel: $channel\n    gateway: $gateway\n    paymentData: $paymentData\n  ) {\n    __typename\n    # initializedPayment\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"gateway\": null,\n\t\"paymentData\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Initializes payment process when it is required by gateway."
					},
					"response": []
				},
				{
					"name": "paymentCheckBalance",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation paymentCheckBalance($input: PaymentCheckBalanceInput!) {\n  paymentCheckBalance(input: $input) {\n    __typename\n    data # Response from the gateway.\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Check payment balance."
					},
					"response": []
				},
				{
					"name": "transactionCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation transactionCreate($id: ID!, $transaction: TransactionCreateInput!, $transactionEvent: TransactionEventInput) {\n  transactionCreate(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    __typename\n    # transaction\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"transaction\": null,\n\t\"transactionEvent\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create transaction for checkout or order. Requires the following permissions: AUTHENTICATED_APP and HANDLE_PAYMENTS.\n\nAdded in Saleor 3.4.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point."
					},
					"response": []
				},
				{
					"name": "transactionUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation transactionUpdate($id: ID!, $transaction: TransactionUpdateInput, $transactionEvent: TransactionEventInput) {\n  transactionUpdate(\n    id: $id\n    transaction: $transaction\n    transactionEvent: $transactionEvent\n  ) {\n    __typename\n    # transaction\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"transaction\": null,\n\t\"transactionEvent\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create transaction for checkout or order. Requires the following permissions: AUTHENTICATED_APP and HANDLE_PAYMENTS.\n\nAdded in Saleor 3.4.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point."
					},
					"response": []
				},
				{
					"name": "transactionRequestAction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation transactionRequestAction($actionType: TransactionActionEnum!, $amount: PositiveDecimal, $id: ID!) {\n  transactionRequestAction(actionType: $actionType, amount: $amount, id: $id) {\n    __typename\n    # transaction\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"actionType\": null,\n\t\"amount\": null,\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Request an action for payment transaction.\n\nAdded in Saleor 3.4.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: HANDLE_PAYMENTS, MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "pageCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageCreate($input: PageCreateInput!) {\n  pageCreate(input: $input) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # page\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new page. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "pageDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageDelete($id: ID!) {\n  pageDelete(id: $id) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # page\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a page. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "pageBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageBulkDelete($ids: [ID!]!) {\n  pageBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes pages. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "pageBulkPublish",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageBulkPublish($ids: [ID!]!, $isPublished: Boolean!) {\n  pageBulkPublish(ids: $ids, isPublished: $isPublished) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"],\n\t\"isPublished\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Publish pages. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "pageUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageUpdate($id: ID!, $input: PageInput!) {\n  pageUpdate(id: $id, input: $input) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # page\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing page. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "pageTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTranslate($id: ID!, $input: PageTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  pageTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # page\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a page. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "pageTypeCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTypeCreate($input: PageTypeCreateInput!) {\n  pageTypeCreate(input: $input) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # pageType\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a new page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageTypeUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTypeUpdate($id: ID, $input: PageTypeUpdateInput!) {\n  pageTypeUpdate(id: $id, input: $input) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # pageType\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageTypeDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTypeDelete($id: ID!) {\n  pageTypeDelete(id: $id) {\n    __typename\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # pageType\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete a page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageTypeBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTypeBulkDelete($ids: [ID!]!) {\n  pageTypeBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete page types. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageAttributeAssign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageAttributeAssign($attributeIds: [ID!]!, $pageTypeId: ID!) {\n  pageAttributeAssign(attributeIds: $attributeIds, pageTypeId: $pageTypeId) {\n    __typename\n    # pageType # The updated page type.\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeIds\": [\"0\"],\n\t\"pageTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Assign attributes to a given page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageAttributeUnassign",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageAttributeUnassign($attributeIds: [ID!]!, $pageTypeId: ID!) {\n  pageAttributeUnassign(attributeIds: $attributeIds, pageTypeId: $pageTypeId) {\n    __typename\n    # pageType # The updated page type.\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeIds\": [\"0\"],\n\t\"pageTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Unassign attributes from a given page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageTypeReorderAttributes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageTypeReorderAttributes($moves: [ReorderInput!]!, $pageTypeId: ID!) {\n  pageTypeReorderAttributes(moves: $moves, pageTypeId: $pageTypeId) {\n    __typename\n    # pageType # Page type from which attributes are reordered.\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"moves\": [null],\n\t\"pageTypeId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the attributes of a page type. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "pageReorderAttributeValues",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pageReorderAttributeValues($attributeId: ID!, $moves: [ReorderInput!]!, $pageId: ID!) {\n  pageReorderAttributeValues(\n    attributeId: $attributeId\n    moves: $moves\n    pageId: $pageId\n  ) {\n    __typename\n    # page # Page from which attribute values are reordered.\n    # pageErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeId\": \"0\",\n\t\"moves\": [null],\n\t\"pageId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder page attribute values. \n\nRequires one of the following permissions: MANAGE_PAGES."
					},
					"response": []
				},
				{
					"name": "draftOrderComplete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderComplete($id: ID!) {\n  draftOrderComplete(id: $id) {\n    __typename\n    # order # Completed order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Completes creating an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrderCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderCreate($input: DraftOrderCreateInput!) {\n  draftOrderCreate(input: $input) {\n    __typename\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # order\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new draft order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrderDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderDelete($id: ID!) {\n  draftOrderDelete(id: $id) {\n    __typename\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # order\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a draft order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrderBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderBulkDelete($ids: [ID!]!) {\n  draftOrderBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes draft orders. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrderLinesBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderLinesBulkDelete($ids: [ID!]!) {\n  draftOrderLinesBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes order lines. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "draftOrderUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation draftOrderUpdate($id: ID!, $input: DraftOrderInput!) {\n  draftOrderUpdate(id: $id, input: $input) {\n    __typename\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # order\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a draft order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderAddNote",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderAddNote($order: ID!, $input: OrderAddNoteInput!) {\n  orderAddNote(order: $order, input: $input) {\n    __typename\n    # order # Order with the note added.\n    # event # Order note created.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"order\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds note to the order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderCancel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderCancel($id: ID!) {\n  orderCancel(id: $id) {\n    __typename\n    # order # Canceled order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Cancel an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderCapture",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderCapture($amount: PositiveDecimal!, $id: ID!) {\n  orderCapture(amount: $amount, id: $id) {\n    __typename\n    # order # Captured order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"amount\": null,\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Capture an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderConfirm",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderConfirm($id: ID!) {\n  orderConfirm(id: $id) {\n    __typename\n    # order\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Confirms an unconfirmed order by changing status to unfulfilled. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfill",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfill($input: OrderFulfillInput!, $order: ID) {\n  orderFulfill(input: $input, order: $order) {\n    __typename\n    # fulfillments # List of created fulfillments. # Type: LIST\n    # order # Fulfilled order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"order\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates new fulfillments for an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfillmentCancel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfillmentCancel($id: ID!, $input: FulfillmentCancelInput) {\n  orderFulfillmentCancel(id: $id, input: $input) {\n    __typename\n    # fulfillment # A canceled fulfillment.\n    # order # Order which fulfillment was cancelled.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Cancels existing fulfillment and optionally restocks items. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfillmentApprove",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfillmentApprove($allowStockToBeExceeded: Boolean, $id: ID!, $notifyCustomer: Boolean!) {\n  orderFulfillmentApprove(\n    allowStockToBeExceeded: $allowStockToBeExceeded\n    id: $id\n    notifyCustomer: $notifyCustomer\n  ) {\n    __typename\n    # fulfillment # An approved fulfillment.\n    # order # Order which fulfillment was approved.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"allowStockToBeExceeded\": null,\n\t\"id\": \"0\",\n\t\"notifyCustomer\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Approve existing fulfillment.\n\nAdded in Saleor 3.1. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfillmentUpdateTracking",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfillmentUpdateTracking($id: ID!, $input: FulfillmentUpdateTrackingInput!) {\n  orderFulfillmentUpdateTracking(id: $id, input: $input) {\n    __typename\n    # fulfillment # A fulfillment with updated tracking.\n    # order # Order for which fulfillment was updated.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a fulfillment for an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfillmentRefundProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfillmentRefundProducts($input: OrderRefundProductsInput!, $order: ID!) {\n  orderFulfillmentRefundProducts(input: $input, order: $order) {\n    __typename\n    # fulfillment # A refunded fulfillment.\n    # order # Order which fulfillment was refunded.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"order\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Refund products. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderFulfillmentReturnProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderFulfillmentReturnProducts($input: OrderReturnProductsInput!, $order: ID!) {\n  orderFulfillmentReturnProducts(input: $input, order: $order) {\n    __typename\n    # returnFulfillment # A return fulfillment.\n    # replaceFulfillment # A replace fulfillment.\n    # order # Order which fulfillment was returned.\n    # replaceOrder # A draft order which was created for products with replace flag.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"order\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Return products. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderLinesCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderLinesCreate($id: ID!, $input: [OrderLineCreateInput!]!) {\n  orderLinesCreate(id: $id, input: $input) {\n    __typename\n    # order # Related order.\n    # orderLines # List of added order lines. # Type: LIST\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create order lines for an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderLineDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderLineDelete($id: ID!) {\n  orderLineDelete(id: $id) {\n    __typename\n    # order # A related order.\n    # orderLine # An order line that was deleted.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an order line from an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderLineUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderLineUpdate($id: ID!, $input: OrderLineInput!) {\n  orderLineUpdate(id: $id, input: $input) {\n    __typename\n    # order # Related order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # orderLine\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an order line of an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderDiscountAdd",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderDiscountAdd($input: OrderDiscountCommonInput!, $orderId: ID!) {\n  orderDiscountAdd(input: $input, orderId: $orderId) {\n    __typename\n    # order # Order which has been discounted.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"orderId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds discount to the order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderDiscountUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderDiscountUpdate($discountId: ID!, $input: OrderDiscountCommonInput!) {\n  orderDiscountUpdate(discountId: $discountId, input: $input) {\n    __typename\n    # order # Order which has been discounted.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"discountId\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update discount for the order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderDiscountDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderDiscountDelete($discountId: ID!) {\n  orderDiscountDelete(discountId: $discountId) {\n    __typename\n    # order # Order which has removed discount.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"discountId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove discount from the order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderLineDiscountUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderLineDiscountUpdate($input: OrderDiscountCommonInput!, $orderLineId: ID!) {\n  orderLineDiscountUpdate(input: $input, orderLineId: $orderLineId) {\n    __typename\n    # orderLine # Order line which has been discounted.\n    # order # Order which is related to the discounted line.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"orderLineId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update discount for the order line. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderLineDiscountRemove",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderLineDiscountRemove($orderLineId: ID!) {\n  orderLineDiscountRemove(orderLineId: $orderLineId) {\n    __typename\n    # orderLine # Order line which has removed discount.\n    # order # Order which is related to line which has removed discount.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"orderLineId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove discount applied to the order line. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderMarkAsPaid",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderMarkAsPaid($id: ID!, $transactionReference: String) {\n  orderMarkAsPaid(id: $id, transactionReference: $transactionReference) {\n    __typename\n    # order # Order marked as paid.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"transactionReference\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Mark order as manually paid. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderRefund",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderRefund($amount: PositiveDecimal!, $id: ID!) {\n  orderRefund(amount: $amount, id: $id) {\n    __typename\n    # order # A refunded order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"amount\": null,\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Refund an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderUpdate($id: ID!, $input: OrderUpdateInput!) {\n  orderUpdate(id: $id, input: $input) {\n    __typename\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # order\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderUpdateShipping",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderUpdateShipping($order: ID!, $input: OrderUpdateShippingInput!) {\n  orderUpdateShipping(order: $order, input: $input) {\n    __typename\n    # order # Order with updated shipping method.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"order\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a shipping method of the order. Requires shipping method ID to update, when null is passed then currently assigned shipping method is removed. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderVoid",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderVoid($id: ID!) {\n  orderVoid(id: $id) {\n    __typename\n    # order # A voided order.\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Void an order. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "orderBulkCancel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderBulkCancel($ids: [ID!]!) {\n  orderBulkCancel(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # orderErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Cancels orders. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "deleteMetadata",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteMetadata($id: ID!, $keys: [String!]!) {\n  deleteMetadata(id: $id, keys: $keys) {\n    __typename\n    # metadataErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # item # Type: INTERFACE\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"keys\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete metadata of an object. To use it, you need to have access to the modified object."
					},
					"response": []
				},
				{
					"name": "deletePrivateMetadata",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deletePrivateMetadata($id: ID!, $keys: [String!]!) {\n  deletePrivateMetadata(id: $id, keys: $keys) {\n    __typename\n    # metadataErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # item # Type: INTERFACE\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"keys\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete object's private metadata. To use it, you need to be an authenticated staff user or an app and have access to the modified object."
					},
					"response": []
				},
				{
					"name": "updateMetadata",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateMetadata($id: ID!, $input: [MetadataInput!]!) {\n  updateMetadata(id: $id, input: $input) {\n    __typename\n    # metadataErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # item # Type: INTERFACE\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates metadata of an object. To use it, you need to have access to the modified object."
					},
					"response": []
				},
				{
					"name": "updatePrivateMetadata",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updatePrivateMetadata($id: ID!, $input: [MetadataInput!]!) {\n  updatePrivateMetadata(id: $id, input: $input) {\n    __typename\n    # metadataErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # item # Type: INTERFACE\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates private metadata of an object. To use it, you need to be an authenticated staff user or an app and have access to the modified object."
					},
					"response": []
				},
				{
					"name": "assignNavigation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation assignNavigation($menu: ID, $navigationType: NavigationType!) {\n  assignNavigation(menu: $menu, navigationType: $navigationType) {\n    __typename\n    # menu # Assigned navigation menu.\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"menu\": null,\n\t\"navigationType\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Assigns storefront's navigation menus. \n\nRequires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS."
					},
					"response": []
				},
				{
					"name": "menuCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuCreate($input: MenuCreateInput!) {\n  menuCreate(input: $input) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menu\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new Menu. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuDelete($id: ID!) {\n  menuDelete(id: $id) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menu\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a menu. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuBulkDelete($ids: [ID!]!) {\n  menuBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes menus. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuUpdate($id: ID!, $input: MenuInput!) {\n  menuUpdate(id: $id, input: $input) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menu\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a menu. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuItemCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemCreate($input: MenuItemCreateInput!) {\n  menuItemCreate(input: $input) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menuItem\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new menu item. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuItemDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemDelete($id: ID!) {\n  menuItemDelete(id: $id) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menuItem\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a menu item. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuItemBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemBulkDelete($ids: [ID!]!) {\n  menuItemBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes menu items. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuItemUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemUpdate($id: ID!, $input: MenuItemInput!) {\n  menuItemUpdate(id: $id, input: $input) {\n    __typename\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menuItem\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a menu item. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "menuItemTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemTranslate($id: ID!, $input: NameTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  menuItemTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # menuItem\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a menu item. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "menuItemMove",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation menuItemMove($menu: ID!, $moves: [MenuItemMoveInput!]!) {\n  menuItemMove(menu: $menu, moves: $moves) {\n    __typename\n    # menu # Assigned menu to move within.\n    # menuErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"menu\": \"0\",\n\t\"moves\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Moves items of menus. \n\nRequires one of the following permissions: MANAGE_MENUS."
					},
					"response": []
				},
				{
					"name": "invoiceRequest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceRequest($number: String, $orderId: ID!) {\n  invoiceRequest(number: $number, orderId: $orderId) {\n    __typename\n    # order # Order related to an invoice.\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"number\": null,\n\t\"orderId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Request an invoice for the order using plugin. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "invoiceRequestDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceRequestDelete($id: ID!) {\n  invoiceRequestDelete(id: $id) {\n    __typename\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Requests deletion of an invoice. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "invoiceCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceCreate($input: InvoiceCreateInput!, $orderId: ID!) {\n  invoiceCreate(input: $input, orderId: $orderId) {\n    __typename\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"orderId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a ready to send invoice. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "invoiceDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceDelete($id: ID!) {\n  invoiceDelete(id: $id) {\n    __typename\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an invoice. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "invoiceUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceUpdate($id: ID!, $input: UpdateInvoiceInput!) {\n  invoiceUpdate(id: $id, input: $input) {\n    __typename\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an invoice. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "invoiceSendNotification",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation invoiceSendNotification($id: ID!) {\n  invoiceSendNotification(id: $id) {\n    __typename\n    # invoiceErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # invoice\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Send an invoice notification to the customer. \n\nRequires one of the following permissions: MANAGE_ORDERS."
					},
					"response": []
				},
				{
					"name": "giftCardActivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardActivate($id: ID!) {\n  giftCardActivate(id: $id) {\n    __typename\n    # giftCard # Activated gift card.\n    # giftCardErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Activate a gift card. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardCreate($input: GiftCardCreateInput!) {\n  giftCardCreate(input: $input) {\n    __typename\n    # giftCardErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # giftCard\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new gift card. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardDelete($id: ID!) {\n  giftCardDelete(id: $id) {\n    __typename\n    # giftCardErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # giftCard\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete gift card.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardDeactivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardDeactivate($id: ID!) {\n  giftCardDeactivate(id: $id) {\n    __typename\n    # giftCard # Deactivated gift card.\n    # giftCardErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivate a gift card. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardUpdate($id: ID!, $input: GiftCardUpdateInput!) {\n  giftCardUpdate(id: $id, input: $input) {\n    __typename\n    # giftCardErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # giftCard\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update a gift card. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardResend",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardResend($input: GiftCardResendInput!) {\n  giftCardResend(input: $input) {\n    __typename\n    # giftCard # Gift card which has been sent.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Resend a gift card.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardAddNote",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardAddNote($id: ID!, $input: GiftCardAddNoteInput!) {\n  giftCardAddNote(id: $id, input: $input) {\n    __typename\n    # giftCard # Gift card with the note added.\n    # event # Gift card note created.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds note to the gift card.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardBulkCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardBulkCreate($input: GiftCardBulkCreateInput!) {\n  giftCardBulkCreate(input: $input) {\n    __typename\n    # count # Returns how many objects were created. # Type: NON_NULL\n    # giftCards # List of created gift cards. # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create gift cards.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardBulkDelete($ids: [ID!]!) {\n  giftCardBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete gift cards.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardBulkActivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardBulkActivate($ids: [ID!]!) {\n  giftCardBulkActivate(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Activate gift cards.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "giftCardBulkDeactivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation giftCardBulkDeactivate($ids: [ID!]!) {\n  giftCardBulkDeactivate(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivate gift cards.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "pluginUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation pluginUpdate($channelId: ID, $id: ID!, $input: PluginUpdateInput!) {\n  pluginUpdate(channelId: $channelId, id: $id, input: $input) {\n    __typename\n    # plugin\n    # pluginsErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channelId\": null,\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update plugin configuration. \n\nRequires one of the following permissions: MANAGE_PLUGINS."
					},
					"response": []
				},
				{
					"name": "externalNotificationTrigger",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalNotificationTrigger($channel: String!, $input: ExternalNotificationTriggerInput!, $pluginId: String) {\n  externalNotificationTrigger(\n    channel: $channel\n    input: $input\n    pluginId: $pluginId\n  ) {\n    __typename\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.\n\nAdded in Saleor 3.1."
					},
					"response": []
				},
				{
					"name": "saleCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleCreate($input: SaleInput!) {\n  saleCreate(input: $input) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # sale\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new sale. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleDelete($id: ID!) {\n  saleDelete(id: $id) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # sale\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a sale. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleBulkDelete($ids: [ID!]!) {\n  saleBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes sales. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleUpdate($id: ID!, $input: SaleInput!) {\n  saleUpdate(id: $id, input: $input) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # sale\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a sale. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleCataloguesAdd",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleCataloguesAdd($id: ID!, $input: CatalogueInput!) {\n  saleCataloguesAdd(id: $id, input: $input) {\n    __typename\n    # sale # Sale of which catalogue IDs will be modified.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds products, categories, collections to a voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleCataloguesRemove",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleCataloguesRemove($id: ID!, $input: CatalogueInput!) {\n  saleCataloguesRemove(id: $id, input: $input) {\n    __typename\n    # sale # Sale of which catalogue IDs will be modified.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Removes products, categories, collections from a sale. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "saleTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleTranslate($id: ID!, $input: NameTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  saleTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # sale\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a sale. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "saleChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation saleChannelListingUpdate($id: ID!, $input: SaleChannelListingInput!) {\n  saleChannelListingUpdate(id: $id, input: $input) {\n    __typename\n    # sale # An updated sale instance.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage sale's availability in channels. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherCreate($input: VoucherInput!) {\n  voucherCreate(input: $input) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # voucher\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherDelete($id: ID!) {\n  voucherDelete(id: $id) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # voucher\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherBulkDelete($ids: [ID!]!) {\n  voucherBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes vouchers. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherUpdate($id: ID!, $input: VoucherInput!) {\n  voucherUpdate(id: $id, input: $input) {\n    __typename\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # voucher\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates a voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherCataloguesAdd",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherCataloguesAdd($id: ID!, $input: CatalogueInput!) {\n  voucherCataloguesAdd(id: $id, input: $input) {\n    __typename\n    # voucher # Voucher of which catalogue IDs will be modified.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds products, categories, collections to a voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherCataloguesRemove",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherCataloguesRemove($id: ID!, $input: CatalogueInput!) {\n  voucherCataloguesRemove(id: $id, input: $input) {\n    __typename\n    # voucher # Voucher of which catalogue IDs will be modified.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Removes products, categories, collections from a voucher. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "voucherTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherTranslate($id: ID!, $input: NameTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  voucherTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # voucher\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for a voucher. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "voucherChannelListingUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation voucherChannelListingUpdate($id: ID!, $input: VoucherChannelListingInput!) {\n  voucherChannelListingUpdate(id: $id, input: $input) {\n    __typename\n    # voucher # An updated voucher instance.\n    # discountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Manage voucher's availability in channels. \n\nRequires one of the following permissions: MANAGE_DISCOUNTS."
					},
					"response": []
				},
				{
					"name": "exportProducts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation exportProducts($input: ExportProductsInput!) {\n  exportProducts(input: $input) {\n    __typename\n    # exportFile # The newly created export file job which is responsible for export data.\n    # exportErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Export products to csv file. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "exportGiftCards",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation exportGiftCards($input: ExportGiftCardsInput!) {\n  exportGiftCards(input: $input) {\n    __typename\n    # exportFile # The newly created export file job which is responsible for export data.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Export gift cards to csv file.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_GIFT_CARD."
					},
					"response": []
				},
				{
					"name": "fileUpload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation fileUpload($file: Upload!) {\n  fileUpload(file: $file) {\n    __typename\n    # uploadedFile\n    # uploadErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"file\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec \n\nRequires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER."
					},
					"response": []
				},
				{
					"name": "checkoutAddPromoCode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutAddPromoCode($checkoutId: ID, $id: ID, $promoCode: String!, $token: UUID) {\n  checkoutAddPromoCode(\n    checkoutId: $checkoutId\n    id: $id\n    promoCode: $promoCode\n    token: $token\n  ) {\n    __typename\n    # checkout # The checkout with the added gift card or voucher.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"promoCode\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds a gift card or a voucher to a checkout."
					},
					"response": []
				},
				{
					"name": "checkoutBillingAddressUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutBillingAddressUpdate($billingAddress: AddressInput!, $checkoutId: ID, $id: ID, $token: UUID, $validationRules: CheckoutAddressValidationRules) {\n  checkoutBillingAddressUpdate(\n    billingAddress: $billingAddress\n    checkoutId: $checkoutId\n    id: $id\n    token: $token\n    validationRules: $validationRules\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"billingAddress\": null,\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"token\": null,\n\t\"validationRules\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update billing address in the existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutComplete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutComplete($checkoutId: ID, $id: ID, $metadata: [MetadataInput]!, $paymentData: JSONString, $redirectUrl: String, $storeSource: Boolean, $token: UUID) {\n  checkoutComplete(\n    checkoutId: $checkoutId\n    id: $id\n    metadata: $metadata\n    paymentData: $paymentData\n    redirectUrl: $redirectUrl\n    storeSource: $storeSource\n    token: $token\n  ) {\n    __typename\n    # order # Placed order.\n    # confirmationNeeded # Set to true if payment needs to be confirmed before checkout is complete. # Type: NON_NULL\n    confirmationData # Confirmation data used to process additional authorization steps.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"metadata\": [null],\n\t\"paymentData\": null,\n\t\"redirectUrl\": null,\n\t\"storeSource\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation."
					},
					"response": []
				},
				{
					"name": "checkoutCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutCreate($input: CheckoutCreateInput!) {\n  checkoutCreate(input: $input) {\n    __typename\n    created # Whether the checkout was created or the current active one was returned. Refer to checkoutLinesAdd and checkoutLinesUpdate to merge a cart with an active checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # checkout\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a new checkout."
					},
					"response": []
				},
				{
					"name": "checkoutCustomerAttach",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutCustomerAttach($checkoutId: ID, $customerId: ID, $id: ID, $token: UUID) {\n  checkoutCustomerAttach(\n    checkoutId: $checkoutId\n    customerId: $customerId\n    id: $id\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"customerId\": null,\n\t\"id\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sets the customer as the owner of the checkout. \n\nRequires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "checkoutCustomerDetach",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutCustomerDetach($checkoutId: ID, $id: ID, $token: UUID) {\n  checkoutCustomerDetach(checkoutId: $checkoutId, id: $id, token: $token) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Removes the user assigned as the owner of the checkout. \n\nRequires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "checkoutEmailUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutEmailUpdate($checkoutId: ID, $email: String!, $id: ID, $token: UUID) {\n  checkoutEmailUpdate(\n    checkoutId: $checkoutId\n    email: $email\n    id: $id\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"email\": null,\n\t\"id\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates email address in the existing checkout object."
					},
					"response": []
				},
				{
					"name": "checkoutLineDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutLineDelete($checkoutId: ID, $id: ID, $lineId: ID, $token: UUID) {\n  checkoutLineDelete(\n    checkoutId: $checkoutId\n    id: $id\n    lineId: $lineId\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"lineId\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a CheckoutLine."
					},
					"response": []
				},
				{
					"name": "checkoutLinesDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutLinesDelete($id: ID, $linesIds: [ID!]!, $token: UUID) {\n  checkoutLinesDelete(id: $id, linesIds: $linesIds, token: $token) {\n    __typename\n    # checkout # An updated checkout.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": null,\n\t\"linesIds\": [\"0\"],\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes checkout lines."
					},
					"response": []
				},
				{
					"name": "checkoutLinesAdd",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutLinesAdd($checkoutId: ID, $id: ID, $lines: [CheckoutLineInput!]!, $token: UUID) {\n  checkoutLinesAdd(checkoutId: $checkoutId, id: $id, lines: $lines, token: $token) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"lines\": [null],\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Adds a checkout line to the existing checkout.If line was already in checkout, its quantity will be increased."
					},
					"response": []
				},
				{
					"name": "checkoutLinesUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutLinesUpdate($checkoutId: ID, $id: ID, $lines: [CheckoutLineUpdateInput!]!, $token: UUID) {\n  checkoutLinesUpdate(\n    checkoutId: $checkoutId\n    id: $id\n    lines: $lines\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"lines\": [null],\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates checkout line in the existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutRemovePromoCode",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutRemovePromoCode($checkoutId: ID, $id: ID, $promoCode: String, $promoCodeId: ID, $token: UUID) {\n  checkoutRemovePromoCode(\n    checkoutId: $checkoutId\n    id: $id\n    promoCode: $promoCode\n    promoCodeId: $promoCodeId\n    token: $token\n  ) {\n    __typename\n    # checkout # The checkout with the removed gift card or voucher.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"promoCode\": null,\n\t\"promoCodeId\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove a gift card or a voucher from a checkout."
					},
					"response": []
				},
				{
					"name": "checkoutPaymentCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutPaymentCreate($checkoutId: ID, $id: ID, $input: PaymentInput!, $token: UUID) {\n  checkoutPaymentCreate(\n    checkoutId: $checkoutId\n    id: $id\n    input: $input\n    token: $token\n  ) {\n    __typename\n    # checkout # Related checkout object.\n    # payment # A newly created payment.\n    # paymentErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"input\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a new payment for given checkout."
					},
					"response": []
				},
				{
					"name": "checkoutShippingAddressUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutShippingAddressUpdate($checkoutId: ID, $id: ID, $shippingAddress: AddressInput!, $token: UUID, $validationRules: CheckoutAddressValidationRules) {\n  checkoutShippingAddressUpdate(\n    checkoutId: $checkoutId\n    id: $id\n    shippingAddress: $shippingAddress\n    token: $token\n    validationRules: $validationRules\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"shippingAddress\": null,\n\t\"token\": null,\n\t\"validationRules\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update shipping address in the existing checkout."
					},
					"response": []
				},
				{
					"name": "checkoutShippingMethodUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutShippingMethodUpdate($checkoutId: ID, $id: ID, $shippingMethodId: ID!, $token: UUID) {\n  checkoutShippingMethodUpdate(\n    checkoutId: $checkoutId\n    id: $id\n    shippingMethodId: $shippingMethodId\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"shippingMethodId\": \"0\",\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates the shipping method of the checkout."
					},
					"response": []
				},
				{
					"name": "checkoutDeliveryMethodUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutDeliveryMethodUpdate($deliveryMethodId: ID, $id: ID, $token: UUID) {\n  checkoutDeliveryMethodUpdate(\n    deliveryMethodId: $deliveryMethodId\n    id: $id\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"deliveryMethodId\": null,\n\t\"id\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates the delivery method (shipping method or pick up point) of the checkout.\n\nAdded in Saleor 3.1.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point."
					},
					"response": []
				},
				{
					"name": "checkoutLanguageCodeUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutLanguageCodeUpdate($checkoutId: ID, $id: ID, $languageCode: LanguageCodeEnum!, $token: UUID) {\n  checkoutLanguageCodeUpdate(\n    checkoutId: $checkoutId\n    id: $id\n    languageCode: $languageCode\n    token: $token\n  ) {\n    __typename\n    # checkout # An updated checkout.\n    # checkoutErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"checkoutId\": null,\n\t\"id\": null,\n\t\"languageCode\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update language code in the existing checkout."
					},
					"response": []
				},
				{
					"name": "orderCreateFromCheckout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation orderCreateFromCheckout($id: ID!, $metadata: [MetadataInput]!, $privateMetadata: [MetadataInput]!, $removeCheckout: Boolean) {\n  orderCreateFromCheckout(\n    id: $id\n    metadata: $metadata\n    privateMetadata: $privateMetadata\n    removeCheckout: $removeCheckout\n  ) {\n    __typename\n    # order # Placed order.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"metadata\": [null],\n\t\"privateMetadata\": [null],\n\t\"removeCheckout\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create new order from existing checkout. Requires the following permissions: AUTHENTICATED_APP and HANDLE_CHECKOUTS.\n\nAdded in Saleor 3.2.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point."
					},
					"response": []
				},
				{
					"name": "channelCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelCreate($input: ChannelCreateInput!) {\n  channelCreate(input: $input) {\n    __typename\n    # channelErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # channel\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates new channel. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "channelUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelUpdate($id: ID!, $input: ChannelUpdateInput!) {\n  channelUpdate(id: $id, input: $input) {\n    __typename\n    # channelErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # channel\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update a channel. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "channelDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelDelete($id: ID!, $input: ChannelDeleteInput) {\n  channelDelete(id: $id, input: $input) {\n    __typename\n    # channelErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # channel\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete a channel. Orders associated with the deleted channel will be moved to the target channel. Checkouts, product availability, and pricing will be removed. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "channelActivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelActivate($id: ID!) {\n  channelActivate(id: $id) {\n    __typename\n    # channel # Activated channel.\n    # channelErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Activate a channel. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "channelDeactivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelDeactivate($id: ID!) {\n  channelDeactivate(id: $id) {\n    __typename\n    # channel # Deactivated channel.\n    # channelErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivate a channel. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "channelReorderWarehouses",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation channelReorderWarehouses($channelId: ID!, $moves: [ReorderInput!]!) {\n  channelReorderWarehouses(channelId: $channelId, moves: $moves) {\n    __typename\n    # channel # Channel within the warehouses are reordered.\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channelId\": \"0\",\n\t\"moves\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the warehouses of a channel.\n\nAdded in Saleor 3.7.\n\nNote: this API is currently in Feature Preview and can be subject to changes at later point. \n\nRequires one of the following permissions: MANAGE_CHANNELS."
					},
					"response": []
				},
				{
					"name": "attributeCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeCreate($input: AttributeCreateInput!) {\n  attributeCreate(input: $input) {\n    __typename\n    # attribute\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates an attribute."
					},
					"response": []
				},
				{
					"name": "attributeDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeDelete($id: ID!) {\n  attributeDelete(id: $id) {\n    __typename\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attribute\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeUpdate($id: ID!, $input: AttributeUpdateInput!) {\n  attributeUpdate(id: $id, input: $input) {\n    __typename\n    # attribute\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeTranslate($id: ID!, $input: NameTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  attributeTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attribute\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for an attribute. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "attributeBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeBulkDelete($ids: [ID!]!) {\n  attributeBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes attributes. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeValueBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeValueBulkDelete($ids: [ID!]!) {\n  attributeValueBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes values of attributes. \n\nRequires one of the following permissions: MANAGE_PAGE_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeValueCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeValueCreate($attribute: ID!, $input: AttributeValueCreateInput!) {\n  attributeValueCreate(attribute: $attribute, input: $input) {\n    __typename\n    # attribute # The updated attribute.\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attributeValue\n  }\n}",
								"variables": "{\n\t\"attribute\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a value for an attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCTS."
					},
					"response": []
				},
				{
					"name": "attributeValueDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeValueDelete($id: ID!) {\n  attributeValueDelete(id: $id) {\n    __typename\n    # attribute # The updated attribute.\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attributeValue\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a value of an attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeValueUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeValueUpdate($id: ID!, $input: AttributeValueUpdateInput!) {\n  attributeValueUpdate(id: $id, input: $input) {\n    __typename\n    # attribute # The updated attribute.\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attributeValue\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates value of an attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "attributeValueTranslate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeValueTranslate($id: ID!, $input: AttributeValueTranslationInput!, $languageCode: LanguageCodeEnum!) {\n  attributeValueTranslate(id: $id, input: $input, languageCode: $languageCode) {\n    __typename\n    # translationErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # attributeValue\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null,\n\t\"languageCode\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates/updates translations for an attribute value. \n\nRequires one of the following permissions: MANAGE_TRANSLATIONS."
					},
					"response": []
				},
				{
					"name": "attributeReorderValues",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation attributeReorderValues($attributeId: ID!, $moves: [ReorderInput!]!) {\n  attributeReorderValues(attributeId: $attributeId, moves: $moves) {\n    __typename\n    # attribute # Attribute from which values are reordered.\n    # attributeErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"attributeId\": \"0\",\n\t\"moves\": [null]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Reorder the values of an attribute. \n\nRequires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES."
					},
					"response": []
				},
				{
					"name": "appCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appCreate($input: AppInput!) {\n  appCreate(input: $input) {\n    __typename\n    authToken # The newly created authentication token.\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # app\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new app. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appUpdate($id: ID!, $input: AppInput!) {\n  appUpdate(id: $id, input: $input) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # app\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appDelete($id: ID!) {\n  appDelete(id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # app\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appTokenCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appTokenCreate($input: AppTokenInput!) {\n  appTokenCreate(input: $input) {\n    __typename\n    authToken # The newly created authentication token.\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # appToken\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new token. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appTokenDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appTokenDelete($id: ID!) {\n  appTokenDelete(id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # appToken\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an authentication token assigned to app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appTokenVerify",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appTokenVerify($token: String!) {\n  appTokenVerify(token: $token) {\n    __typename\n    # valid # Determine if token is valid or not. # Type: NON_NULL\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Verify provided app token."
					},
					"response": []
				},
				{
					"name": "appInstall",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appInstall($input: AppInstallInput!) {\n  appInstall(input: $input) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # appInstallation\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Install new app by using app manifest. Requires the following permissions: AUTHENTICATED_STAFF_USER and MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appRetryInstall",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appRetryInstall($activateAfterInstallation: Boolean, $id: ID!) {\n  appRetryInstall(activateAfterInstallation: $activateAfterInstallation, id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # appInstallation\n  }\n}",
								"variables": "{\n\t\"activateAfterInstallation\": null,\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Retry failed installation of new app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appDeleteFailedInstallation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appDeleteFailedInstallation($id: ID!) {\n  appDeleteFailedInstallation(id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # appInstallation\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete failed installation. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appFetchManifest",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appFetchManifest($manifestUrl: String!) {\n  appFetchManifest(manifestUrl: $manifestUrl) {\n    __typename\n    # manifest\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"manifestUrl\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Fetch and validate manifest. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appActivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appActivate($id: ID!) {\n  appActivate(id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # app\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Activate the app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "appDeactivate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation appDeactivate($id: ID!) {\n  appDeactivate(id: $id) {\n    __typename\n    # appErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # app\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivate the app. \n\nRequires one of the following permissions: MANAGE_APPS."
					},
					"response": []
				},
				{
					"name": "tokenCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation tokenCreate($audience: String, $email: String!, $password: String!) {\n  tokenCreate(audience: $audience, email: $email, password: $password) {\n    __typename\n    token # JWT token, required to authenticate.\n    refreshToken # JWT refresh token, required to re-generate access token.\n    csrfToken # CSRF token required to re-generate access token.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"audience\": null,\n\t\"email\": null,\n\t\"password\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create JWT token."
					},
					"response": []
				},
				{
					"name": "tokenCreateWithPhone",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation tokenCreateWithPhone($phone: String!) {\n  tokenCreateWithPhone(phone: $phone) {\n    __typename\n    otpGenerated # Gives the status if otp is generated.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"phone\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create JWT token."
					},
					"response": []
				},
				{
					"name": "tokenRefresh",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation tokenRefresh($csrfToken: String, $refreshToken: String) {\n  tokenRefresh(csrfToken: $csrfToken, refreshToken: $refreshToken) {\n    __typename\n    token # JWT token, required to authenticate.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"csrfToken\": null,\n\t\"refreshToken\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Refresh JWT token. Mutation tries to take refreshToken from the input.If it fails it will try to take refreshToken from the http-only cookie -refreshToken. csrfToken is required when refreshToken is provided as a cookie."
					},
					"response": []
				},
				{
					"name": "tokenVerify",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation tokenVerify($token: String!) {\n  tokenVerify(token: $token) {\n    __typename\n    # user # User assigned to token.\n    # isValid # Determine if token is valid or not. # Type: NON_NULL\n    payload # JWT payload.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Verify JWT token."
					},
					"response": []
				},
				{
					"name": "otpVerify",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation otpVerify($audience: String, $otp: Int!, $phone: String!) {\n  otpVerify(audience: $audience, otp: $otp, phone: $phone) {\n    __typename\n    token # JWT token, required to authenticate.\n    refreshToken # JWT refresh token, required to re-generate access token.\n    csrfToken # CSRF token required to re-generate access token.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"audience\": null,\n\t\"otp\": null,\n\t\"phone\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create JWT token."
					},
					"response": []
				},
				{
					"name": "tokensDeactivateAll",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation tokensDeactivateAll {\n  tokensDeactivateAll {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deactivate all JWT tokens of the currently authenticated user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "externalAuthenticationUrl",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalAuthenticationUrl($input: JSONString!, $pluginId: String!) {\n  externalAuthenticationUrl(input: $input, pluginId: $pluginId) {\n    __typename\n    authenticationData # The data returned by authentication plugin.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Prepare external authentication url for user by custom plugin."
					},
					"response": []
				},
				{
					"name": "externalObtainAccessTokens",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalObtainAccessTokens($input: JSONString!, $pluginId: String!) {\n  externalObtainAccessTokens(input: $input, pluginId: $pluginId) {\n    __typename\n    token # The token, required to authenticate.\n    refreshToken # The refresh token, required to re-generate external access token.\n    csrfToken # CSRF token required to re-generate external access token.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Obtain external access tokens for user by custom plugin."
					},
					"response": []
				},
				{
					"name": "externalRefresh",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalRefresh($input: JSONString!, $pluginId: String!) {\n  externalRefresh(input: $input, pluginId: $pluginId) {\n    __typename\n    token # The token, required to authenticate.\n    refreshToken # The refresh token, required to re-generate external access token.\n    csrfToken # CSRF token required to re-generate external access token.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Refresh user's access by custom plugin."
					},
					"response": []
				},
				{
					"name": "externalLogout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalLogout($input: JSONString!, $pluginId: String!) {\n  externalLogout(input: $input, pluginId: $pluginId) {\n    __typename\n    logoutData # The data returned by authentication plugin.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Logout user by custom plugin."
					},
					"response": []
				},
				{
					"name": "externalVerify",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation externalVerify($input: JSONString!, $pluginId: String!) {\n  externalVerify(input: $input, pluginId: $pluginId) {\n    __typename\n    # user # User assigned to data.\n    # isValid # Determine if authentication data is valid or not. # Type: NON_NULL\n    verifyData # External data.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"pluginId\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Verify external authentication data by plugin."
					},
					"response": []
				},
				{
					"name": "requestPasswordReset",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation requestPasswordReset($channel: String, $email: String!, $redirectUrl: String!) {\n  requestPasswordReset(\n    channel: $channel\n    email: $email\n    redirectUrl: $redirectUrl\n  ) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"email\": null,\n\t\"redirectUrl\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sends an email with the account password modification link."
					},
					"response": []
				},
				{
					"name": "confirmAccount",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation confirmAccount($email: String!, $token: String!) {\n  confirmAccount(email: $email, token: $token) {\n    __typename\n    # user # An activated user account.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"email\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Confirm user account with token sent by email during registration."
					},
					"response": []
				},
				{
					"name": "setPassword",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation setPassword($email: String!, $password: String!, $token: String!) {\n  setPassword(email: $email, password: $password, token: $token) {\n    __typename\n    token # JWT token, required to authenticate.\n    refreshToken # JWT refresh token, required to re-generate access token.\n    csrfToken # CSRF token required to re-generate access token.\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"email\": null,\n\t\"password\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sets the user's password from the token sent by email using the RequestPasswordReset mutation."
					},
					"response": []
				},
				{
					"name": "passwordChange",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation passwordChange($newPassword: String!, $oldPassword: String!) {\n  passwordChange(newPassword: $newPassword, oldPassword: $oldPassword) {\n    __typename\n    # user # A user instance with a new password.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"newPassword\": null,\n\t\"oldPassword\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Change the password of the logged in user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "requestEmailChange",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation requestEmailChange($channel: String, $newEmail: String!, $password: String!, $redirectUrl: String!) {\n  requestEmailChange(\n    channel: $channel\n    newEmail: $newEmail\n    password: $password\n    redirectUrl: $redirectUrl\n  ) {\n    __typename\n    # user # A user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"newEmail\": null,\n\t\"password\": null,\n\t\"redirectUrl\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Request email change of the logged in user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "confirmEmailChange",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation confirmEmailChange($channel: String, $token: String!) {\n  confirmEmailChange(channel: $channel, token: $token) {\n    __typename\n    # user # A user instance with a new email.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Confirm the email change of the logged-in user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "accountAddressCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountAddressCreate($input: AddressInput!, $type: AddressTypeEnum) {\n  accountAddressCreate(input: $input, type: $type) {\n    __typename\n    # user # A user instance for which the address was created.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"type\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a new address for the customer. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "accountAddressUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountAddressUpdate($id: ID!, $input: AddressInput!) {\n  accountAddressUpdate(id: $id, input: $input) {\n    __typename\n    # user # A user object for which the address was edited.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER."
					},
					"response": []
				},
				{
					"name": "accountAddressDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountAddressDelete($id: ID!) {\n  accountAddressDelete(id: $id) {\n    __typename\n    # user # A user instance for which the address was deleted.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete an address of the logged-in user. Requires one of the following permissions: MANAGE_USERS, IS_OWNER."
					},
					"response": []
				},
				{
					"name": "accountSetDefaultAddress",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountSetDefaultAddress($id: ID!, $type: AddressTypeEnum!) {\n  accountSetDefaultAddress(id: $id, type: $type) {\n    __typename\n    # user # An updated user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"type\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sets a default address for the authenticated user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "accountRegister",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountRegister($input: AccountRegisterInput!) {\n  accountRegister(input: $input) {\n    __typename\n    requiresConfirmation # Informs whether users need to confirm their email address.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Register a new user."
					},
					"response": []
				},
				{
					"name": "accountRegisterWithPhone",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountRegisterWithPhone($input: AccountRegisterInputWithPhone!) {\n  accountRegisterWithPhone(input: $input) {\n    __typename\n    requiresConfirmation # Informs whether users need to confirm their phone number.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Register a new user."
					},
					"response": []
				},
				{
					"name": "accountUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountUpdate($input: AccountInput!) {\n  accountUpdate(input: $input) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates the account of the logged-in user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "accountRequestDeletion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountRequestDeletion($channel: String, $redirectUrl: String!) {\n  accountRequestDeletion(channel: $channel, redirectUrl: $redirectUrl) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"channel\": null,\n\t\"redirectUrl\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sends an email with the account removal link for the logged-in user. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "accountDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation accountDelete($token: String!) {\n  accountDelete(token: $token) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"token\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Remove user account. \n\nRequires one of the following permissions: AUTHENTICATED_USER."
					},
					"response": []
				},
				{
					"name": "addressCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addressCreate($input: AddressInput!, $userId: ID!) {\n  addressCreate(input: $input, userId: $userId) {\n    __typename\n    # user # A user instance for which the address was created.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"input\": null,\n\t\"userId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates user address. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "addressUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addressUpdate($id: ID!, $input: AddressInput!) {\n  addressUpdate(id: $id, input: $input) {\n    __typename\n    # user # A user object for which the address was edited.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an address. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "addressDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addressDelete($id: ID!) {\n  addressDelete(id: $id) {\n    __typename\n    # user # A user instance for which the address was deleted.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # address\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes an address. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "addressSetDefault",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addressSetDefault($addressId: ID!, $type: AddressTypeEnum!, $userId: ID!) {\n  addressSetDefault(addressId: $addressId, type: $type, userId: $userId) {\n    __typename\n    # user # An updated user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"addressId\": \"0\",\n\t\"type\": null,\n\t\"userId\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Sets a default address for the given user. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "customerCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation customerCreate($input: UserCreateInput!) {\n  customerCreate(input: $input) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new customer. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "customerUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation customerUpdate($id: ID!, $input: CustomerInput!) {\n  customerUpdate(id: $id, input: $input) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing customer. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "customerDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation customerDelete($id: ID!) {\n  customerDelete(id: $id) {\n    __typename\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a customer. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "customerBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation customerBulkDelete($ids: [ID!]!) {\n  customerBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes customers. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "staffCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffCreate($input: StaffCreateInput!) {\n  staffCreate(input: $input) {\n    __typename\n    # staffErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Creates a new staff user. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "staffUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffUpdate($id: ID!, $input: StaffUpdateInput!) {\n  staffUpdate(id: $id, input: $input) {\n    __typename\n    # staffErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Updates an existing staff user. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "staffDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffDelete($id: ID!) {\n  staffDelete(id: $id) {\n    __typename\n    # staffErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # user\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a staff user. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "staffBulkDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation staffBulkDelete($ids: [ID!]!) {\n  staffBulkDelete(ids: $ids) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # staffErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"]\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes staff users. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "userAvatarUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation userAvatarUpdate($image: Upload!) {\n  userAvatarUpdate(image: $image) {\n    __typename\n    # user # An updated user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"image\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec \n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER."
					},
					"response": []
				},
				{
					"name": "userAvatarDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation userAvatarDelete {\n  userAvatarDelete {\n    __typename\n    # user # An updated user instance.\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Deletes a user avatar. Only for staff members. \n\nRequires one of the following permissions: AUTHENTICATED_STAFF_USER."
					},
					"response": []
				},
				{
					"name": "userBulkSetActive",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation userBulkSetActive($ids: [ID!]!, $isActive: Boolean!) {\n  userBulkSetActive(ids: $ids, isActive: $isActive) {\n    __typename\n    # count # Returns how many objects were affected. # Type: NON_NULL\n    # accountErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n  }\n}",
								"variables": "{\n\t\"ids\": [\"0\"],\n\t\"isActive\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Activate or deactivate users. \n\nRequires one of the following permissions: MANAGE_USERS."
					},
					"response": []
				},
				{
					"name": "permissionGroupCreate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation permissionGroupCreate($input: PermissionGroupCreateInput!) {\n  permissionGroupCreate(input: $input) {\n    __typename\n    # permissionGroupErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # group\n  }\n}",
								"variables": "{\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Create new permission group. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "permissionGroupUpdate",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation permissionGroupUpdate($id: ID!, $input: PermissionGroupUpdateInput!) {\n  permissionGroupUpdate(id: $id, input: $input) {\n    __typename\n    # permissionGroupErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # group\n  }\n}",
								"variables": "{\n\t\"id\": \"0\",\n\t\"input\": null\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Update permission group. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				},
				{
					"name": "permissionGroupDelete",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation permissionGroupDelete($id: ID!) {\n  permissionGroupDelete(id: $id) {\n    __typename\n    # permissionGroupErrors # Type: NON_NULL\n    # errors # Type: NON_NULL\n    # group\n  }\n}",
								"variables": "{\n\t\"id\": \"0\"\n}"
							}
						},
						"url": {
							"raw": "http://localhost:8000/graphql/",
							"protocol": "http",
							"host": [
								"localhost:8000"
							],
							"path": [
								"graphql",
								""
							]
						},
						"description": "Delete permission group. Apps are not allowed to perform this mutation. \n\nRequires one of the following permissions: MANAGE_STAFF."
					},
					"response": []
				}
			]
		}
	]
}